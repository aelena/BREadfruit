using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BREadfruit.Exceptions;
using NUnit.Framework;
using BREadfruit.Helpers;
using BREadfruit.Conditions;
/* ************************************************************
 *                                                            *
 * AUTOGENERATED ON : 21/01/2015 14:41:55	
 *                                                            *
************************************************************* */
namespace BREadfruit.Tests.Autogenerated
{
	[TestFixture]
	public class CustomerEntities
	{
		[Test]
		public void TestEntity_rbSpiridon ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity rbSpiridon is RadioButton in frmSearch
	with defaults
		enabled false
		label ""Spiridon""
		value true				; means checked
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "rbSpiridon", "Entity name should be 'rbSpiridon' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_rbEPass ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity rbEPass is RadioButton in frmSearch
	with defaults
		enabled false
		label ""Epass""
		value false				; means unchecked
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "rbEPass", "Entity name should be 'rbEPass' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerName ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerName is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerName
		value   ''
	with actions
		hide btnCreateCustomer
		clear CustomerSearchResultGrid
		set hidden CustomerSearchResultGrid
	with rules
	with triggers
		TBCustomerName.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerName", "Entity name should be 'TBCustomerName' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerCity ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerCity is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerCity
		value   ''
	with actions
		hide btnCreateCustomer
		set hidden CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
	with triggers
		TBCustomerName.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerCity", "Entity name should be 'TBCustomerCity' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=3, RULES=2, TRIGGERS=1
Entity TBCustomerNumber is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerNumber
		value   ''
		min length 10
		max length 10
		validation ^[0-9]{10}$
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
		; show this message ""This partner is not managed by Madam. Please contact GSS master data team."" if starting with 0
		TBCustomerNumber.text starts with '0' then
			set value MESSAGES.ERRPartnerNotManaged in MESSAGE_POPUP
		TBCustomerNumber.text not starts with '0' then
			set value '' in MESSAGE_POPUP
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerNumber", "Entity name should be 'TBCustomerNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerIFA ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=3, RULES=2, TRIGGERS=1
Entity TBCustomerIFA is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerIFA
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
		TBCustomerIFA.Value is not empty then 
			DDLDCountry mandatory false
		else
			DDLDCountry mandatory true
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerIFA", "Entity name should be 'TBCustomerIFA' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLDCountry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=5, RULES=4, TRIGGERS=1
Entity DDLDCountry is DropDownList in frmSearch
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		label LABELS.labCountry
		value USER.COUNTRY		; preselect user country if there is data in SCD for this user
	with actions
		set value '' in MESSAGE_POPUP
		hide CustomerSearchResultGrid
		hide btnCreateCustomer
		load data from DATASOURCE.MDMC_Countries 
		clear CustomerSearchResultGrid
	with rules
		DDLCDCountry.Value in {FR,GF,GP,RE,MQ,YT,NC,PF,PM,WF,MC} then label LABELS.labSIRET in TBVendorVAT
		DDLCDCountry.Value in {PT,ES} then label LABELS.labNIF in TBVendorVAT
		DDLCDCountry.Value is IT then label LABELS.labPartitaIVA in TBVendorVAT
		DDLCDCountry.Value not in {PT,ES,IT,FR,GF,GP,RE,MQ,YT,NC,PF,PM,WF,MC} then label LABELS.labVAT in TBVendorVAT
	with triggers
		this.Value changes 
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLDCountry", "Entity name should be 'DDLDCountry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 5, "Should have '5' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerVAT ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerVAT is TextBox in frmSearch
	with defaults
		value ''
		label LABELS.labCustomerVAT
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerVAT", "Entity name should be 'TBCustomerVAT' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDCountry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, ACTIONS=7, RULES=0, TRIGGERS=1
Entity DDLCDCountry is DropDownList in frmSearch
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labCountry
		value USER.COUNTRY		; preselect user country if there is data in SCD for this user
		load data from DATASOURCE.MDMC_ClusterCountries
		mandatory true
	with actions
		; load active companies for this country
		load data from DATASOURCE.MDMC_ClusterCompanies with arguments {CountryCode : this.Value} in DDLCDCompany
		; purge the data in this dropdownlist
		clear DDLCDSalesOrg
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDCountry", "Entity name should be 'DDLCDCountry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 7, "Should have '7' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDCompany ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7	, ACTIONS=4, RULES=0, TRIGGERS=1
Entity DDLCDCompany is DropDownList in frmSearch
	with defaults
		label LABELS.labCompany
		mandatory true
		data field DisplayName
		value field Code
		value USER.COST_LOCATION_UNIT			; another data constant
	with actions
		; load active companies for this country
		load data from DATASOURCE.MDMC_ClusterSalesOrganizations with arguments {CompanyCode: DDLCDCompany.Value} in DDLCDSalesOrg 
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDCompany", "Entity name should be 'DDLCDCompany' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 4, "Should have '4' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDSalesOrg ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=4, RULES=0, TRIGGERS=1
Entity DDLCDSalesOrg is DropDownList in frmSearch
	with defaults
		label LABELS.labSalesOrg
		value ''
		mandatory true
		data field DisplayName
		value field Code
	with actions
		; load active companies for this country
		; this means the current ìmplementation needs to change a bit...
		; TODO: REORGANIZE THE TABLE TO REFLECT THIS CHANGES IN TEH VALUES LOADED IN THIS DIST CHANNEL COMBO ISNTEAD OF REMOVING BY CODE
		load data from DATASOURCE.SelectDistributionChannels with arguments {countrycode : DDLCDCountry.Value, companycode :DDLCDCompany.Value, salesorgcode :DDLCDSalesOrg.Value} in DDLCDDistribChannel
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with rules
		DDLCDDistribChannel.HasItems is true then
			DDLCDDistribChannel visible true
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDSalesOrg", "Entity name should be 'DDLCDSalesOrg' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 4, "Should have '4' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDDistribChannel ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, ACTIONS=3, RULES=2, TRIGGERS=1
Entity DDLCDDistribChannel is DropDownList in frmSearch
	with defaults
		label LABELS.labDistribChannel
		data field DisplayName
		value field Code
		visible false
	with actions
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with rules
		DDLCDDistribChannel.Count > 0 then
			DDLCDDistribChannel visible true
		else
			DDLCDDistribChannel visible false
		DDLCDDistribChannel is visible and DDLCDivision is empty then
			DDLCDDistribChannel mandatory
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDDistribChannel", "Entity name should be 'DDLCDDistribChannel' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDivision ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, ACTIONS=0, RULES=2, TRIGGERS=0
Entity DDLCDivision is DropDownList in frmSearch
	with defaults
		visible false
		label LABELS.labDivision
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Divisions with arguments {ClusterCountryCode: DDLCDCountry.Value, ClusterCompanyCode : DDLCDCompany.Value, ClusterSalesOrganization : DDLCDSalesOrg.Value, FlagActive : true }
	; TODO: WHEN DOES THIS CONTROL BECOME VISIBLE
	with rules
		DDLCDivision.Count > 0 then
			this visible true
		else
			this visible false
		DDLCDivision is visible and DDLCDivision is empty then
			DDLCDivision mandatory
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDivision", "Entity name should be 'DDLCDivision' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnSearch ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=0, RULES=1, TRIGGERS=1
Entity btnSearch is Button in frmSearch
	with defaults
		label LABELS.btnSearch
	with rules
		; yes, teh function defines the last parameter as ClusterPOCode, not ClusterSOCode, so this is right
		DATASOURCE.IsUserInROLE with arguments { UserAccount : USER.USER_ACCOUNT, RoleCode : USER.CURRENT_ROLE, ClusterCountryCode : DDLCDCountry.Value, ClusterCompanyCode : DDLCDCompany.Value, ClusterPOCode : DDLCDSalesOrg.Value } is false then
			set value MESSAGES.ERRauthCCPO in MESSAGE_POPUP
		else
			TBCustomerNumber.text starts with '0' then
				set value MESSAGES.ERRPartnerNotManaged in MESSAGE_POPUP
			DDLCDivision is visible and DDLCDivision is empty then
				; show this message : Fill the field of Division Country
				set value MESSAGES.ERRfieldDivisionCountry in MESSAGE_POPUP
			TBCustomerNumber.Length is not 10 then
				set value MESSAGES.ERRfieldCNumer_10 in MESSAGE_POPUP
			DDLDCountry is empty and TBCustomerIFA is empty then
				set value MESSAGES.ERRfieldVCountry in MESSAGE_POPUP
			TBCustomerVAT is not empty and DDLDCountry is empty then
				set value MESSAGES.ERRfieldCCountry in MESSAGE_POPUP
			TBCustomerVAT is empty and TBCustomerVAT is empty and TBCustomerName is empty and TBCustomerCity is empty and TBCustomerIFA is empty then
				set value ""Fill the fields KeyTax or Customer or IFA Number or Country + Name or Country + City"" in MESSAGE_POPUP
			TBCustomerVAT is empty and TBCustomerVAT is empty and DDLDCountry is empty then
				set value MESSAGES.ERRfieldCCountry in MESSAGE_POPUP
			; TBCustomerName is empty and TBCustomerCity is not empty and TBCustomerName is empty and TBCustomerIFA is empty and DDLDCountry is empty and TBCustomerVAT is empty then
			; 	set value MESSAGES.VALIDATIONS.SEARCH.FILL01 in MESSAGE_POPUP
			DDLCDCountry is empty or DDLCDCompany is empty or DDLCDSalesOrg is empty then
				set value MESSAGES.ERRSOfieldCCS in MESSAGE_POPUP
			; TODO: VERIFY THIS WITH SEB
			MESSAGE_POPUP is empty then
				load data from WEBSERVICE.CUSTOMER_SEARCH_SERVICE with arguments {CustomerName:TBCustomerName.Value, CustomerCity:TBCustomerCity, CustomerNumber:TBCustomerNumber.Value, CustomerCountry:DDLVDCountry.Value,TaxCode1:TBCustomerVAT.Value,TaxCode4:TBCustomerIFA.Value, Country:DDLDCountry.Value, CompanyCode:DDLCDCompany.Value, SalesOrganization:DDLCDSalesOrg.Value, Division:DDLCDivision } in CustomerSearchResultGrid
	with triggers
		this on click	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "btnSearch", "Entity name should be 'btnSearch' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnCreateCustomer ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=0, RULES=0, TRIGGERS=1
Entity btnCreateCustomer is Button in frmSearch
	with defaults
		label LABELS.btnCreateCustomer
	with actions
		; transition to the main form
		; TODO: guess we will have to pass some arguments here and map things to the conceptual model
		; TODO: PROBABLY NOT NEEDED
		; change form to frmMain with arguments {""A"" : ""B""}
	with rules
		; how to specify all that happens server side here?
		; shall be express something like change form?
	with triggers
		this click
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "btnCreateCustomer", "Entity name should be 'btnCreateCustomer' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CustomerSearchResultGrid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=2
Entity CustomerSearchResultGrid is Grid in frmSearch
	with defaults
		visible false
	; TODO: DEFINE CONVENTIONS FOR GRID BETTER
	; MISSING ACTIOSN ON GRID BUTTONS
; ----------------------------------------------------------------------------	
;     END OF SEARCH FORM DEFINITION
; ----------------------------------------------------------------------------	
; ----------------------------------------------------------------------------	
; BEGIN MAIN FORM CONTROL DEFINITION
; ----------------------------------------------------------------------------	
; ----------------------------------------------------------------------------
;  -- LIST OF ALL ENTITIES FOUND in MDMC main FORM
; ----------------------------------------------------------------------------
; TODO: PENDING STUFF LIKE THE COMPOSITE CONTROLS-... FOR EXAMPLE CONTACT PERSONS ETC.....
;		AND TELEPHONES, EMAIL, ETC
;	labOpInfoCustomer
;	labOpInfoCountry
;	labOpInfoCC
;	labOpInfoSO
;	labOpInfoDC
;	GD_Adr_Name
;	GD_Adr_Name2
;	GD_Adr_Name3
;	GD_Adr_Name4
;	GD_Adr_Search
;	GD_Com_Comment
;	GD_Adr_Street
;	GD_Adr_Street2
;	GD_Adr_Street3
;	GD_Adr_Street4
;	GD_Adr_Street5
;	GD_Adr_CountryGD
;	GD_Adr_Region
;	GD_Adr_City
;	GD_Adr_City2
;	GD_Adr_PostalCode
;	GD_Adr_POBox
;	GD_Adr_POBoxPostalCode
;	GD_Adr_POBoxLoc
;	GD_Com_LanguageCode
;	GD_Com_Telebox
;	GD_Com_DataLine
;	GD_Ctr_CustomerNumber
;	GD_Ctr_Industry
;	GD_Ctr_UnsubscribeCMD
;	GD_Ctr_GFORM
;	GD_Ctr_PIVA
;	GD_Ctr_CF
;	GD_Ctr_VendorNumber
;	GD_Ctr_IFANumber
;	GD_Ctr_TaxCode1
;	GD_Ctr_TaxCode2
;	GD_Ctr_VATRegistrationNumber
;	labGD_MainlyMilitary
;	labGD_MainlyCivilian
;	GD_Nuclear
;	labGD_FreeZone
;	labGD_Embassy
;	GD_Nat_NaturalPerson
;	GD_Nat_BirthDate
;	GD_Nat_PlaceOfBirth
;	GD_Nat_Profession
;	GD_Nat_Sex
;	CC_CO_ReconAccount
;	CC_PT_PaymentTerms
;	CC_PT_PaymentMethods
;	CC_PT_ClearingWithCustomer
;	CC_PT_IndividualPayment
;	CC_CO_AccountingClerk
;	CC_DD_DunningProcedure
;	CC_DD_DunningArea
;	CC_AR_PledgeIndicator
;	KNVV_BZIRK
;	SO_CustomerGroup
;	SO_SalesOffice
;	KNVV_EIKTO
;	KNVV_VKGRP
;	SO_SalesOrderCurrency
;	KNVV_KONDA
;	KNVV_PLTYP
;	SO_CustPricingProc
;	SO_CustomerStatsGroup
;	SO_CustomerShippingConditions
;	KNVV_VWERK
;	KNVV_AUTLF
;	KNVV_ANTLF
;	KNVV_LPRIO
;	KNVV_KZTLF
;	KNVV_PRFRE
;	SO_Incoterms
;	SO_IncotermsPart2
;	SO_TermsOfPaymentKey
;	KNVV_KTGRD
;	SO_TaxClassification
;	KNKK_SBGRP
;	KNVV_KVGR1
;	KNVV_KVGR2
;	KNVV_KVGR3
;	KNVV_KVGR4
;	KNVV_KVGR5
;	KNKK_KNKLI
;	KNKK_KLIMK
;	KNKK_CTLPC
;	KNKK_DTREV
;	KNKK_NXTRV
;	KNKK_KRAUS
;	KNKK_DBRTG
;	KNKK_REVDB
;	KNKK_DBEKR
;	btnBlockAll
;	btnUnblockAll
;	BLK_GD_Ctr_UnsubscribeCMD
;	labCentralPostingBlock
;	BLK_CentralPostingBlock
;	labPostBlockingForCompanyCode
;	BLK_PostingBlockForCC
;	BLK_CentralSalesOrderBlock
;	BLK_OrdersBlockAtSalesArea
;	BLK_CentralDeliveriesBlock
;	BLK_DeliveriesBlockAtSalesArea
;	BLK_CentralBillingBlock
;	BLK_BillingBlockAtSalesArea
;	labCentralSalesSupportBlock
;	BLK_CentralSalesSupportBlock
;	labCentralSalesSupportBlockAtThisSalesArea
;	BLK_CentralSalesSupportBlockAtSalesArea
;	labCentralDelMasterRecord
;	BLK_CentralDeletionFlagMasterRecord
;	labDelFlagMasterCompanyCode
;	BLK_DeletionFlagMasterRecordCC
;	labDelFlagAtThisSalesArea
;	BLK_DeletionFlagMasterRecordSA
;	labCentralDelBlockMaster
;	BLK_CentralDeletionBlockMasterRecord
;	labDelBlockMasterCompany
;	BLK_DeletionBlockMasterRecordCC
;	TS_IsUrgentRequest
;	CostCenter
;	DDLDCReqAction
;	GD_SAPNumber
;	labNextRole
;	labNextAction
;	DDLDCComment
;	btnSubmit
;	btnClose
;	MADAM_MESSAGE_POPUP
;	GD_Ctr_RiskClassification
;	GD_Adr_Country
;	GD_Ctr_CustomerClassification
;	CC_AM_BPClassification
;	GD_Damex
;	GD_Ctr_IsNaturalPerson
;	labGD_DamexNote
;	ATTACHMENT
;	AttachHistory
;	SAP_Message
;	CostCenter
;	DDLDCReqAction
;	GD_SAPNumber
;	labNextRole
;	labNextAction
;	DDLDCComment
;	btnSCClose
;	SCMessage
;	lbFMRelevantFor
;	lbOtherDependencies
;	HF_RelevantForSUS
;	HF_MandatoryAttachment
;	HF_MandatoryComment
;	HF_RelevantForCO
;	HF_RelevantForClusterRCO
;	txbNextRole
;	SR_Comments
;	btnBack2
;	btnSave
;	btnCloseFinal
;	SummaryMESSAGE_POPUP
; TODO: SOME HIDDEN FIELDS - CC_AM_SortKey, CC_AM_InterestIndic, CC_AM_CashManagementGroup, KNB1.XZVER, CC_CO_AuthorizationGroup
; TODO: THINK IF NEEDED IN REQUEST MODEL OR MAPPINGS....1277
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "CustomerSearchResultGrid", "Entity name should be 'CustomerSearchResultGrid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 2, "Should have '2' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_RiskClassification ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=4, ACTIONS=0, TRIGGERS=1
Entity GD_Ctr_RiskClassification is DropDownList in frmMain
	with defaults
		enabled true
		visible true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_RiskClassifications
		label LABELS.labGD_Ctr_RiskClassification
		value 00
		mandatory true
	with rules
		GD_Ctr_RiskClassification.Value is empty then
			GD_Ctr_RiskClassification enabled true
		CC_AM_BPClassification is enabled then
			GD_Ctr_RiskClassification enabled true
		REQUEST.CURRENT_ROLE in {ROLES.ENQ, ROLES.RCO, ROLES.CLERK} then 
			this enabled true
		else
			this enabled false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE is ROLES.SUS or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_RiskClassification", "Entity name should be 'GD_Ctr_RiskClassification' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_Adr_Country is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		visible true
		enabled false					; this control is always disabled
		value REQUEST.VENDOR_COUNTRY
		load data from DATASOURCE.MDMC_Countries
		mandatory true
		label LABELS.labGD_Adr_Country
	with rules
		; TODO: THESE RULES HAVE TO GO SOMEWHERE ELSE
		; GD_Adr_Country.Value is ES and GD_Ctr_VendorClassification is not G and GD_Ctr_TaxCode1.Value starts with {P,Q,S,U} and REQUEST.CURRENT_ROLE is ROLES.ENQ  and REQUEST.REQUEST_TYPE is CC then
		; 	set value G in GD_Ctr_VendorClassification
		; 
		; GD_Adr_Country.Value is ES and GD_Ctr_VendorClassification is not G and GD_Ctr_TaxCode1.Value starts with {P,Q,S,U} and REQUEST.CURRENT_ROLE is ROLES.ENQ  and REQUEST.REQUEST_TYPE is not CC and GD_Ctr_CustomerClassification.OldDisplayValue is not empty then
		; 	set value G in GD_Ctr_VendorClassification
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Country", "Entity name should be 'GD_Adr_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_CustomerClassification ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Ctr_CustomerClassification is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labGD_Ctr_VendorClassification
		mandatory true
		visible true
		enabled true
		value NG
		; values G  and NG
		load data from DATASOURCE.VENDOR_CLASSIFICATIONS
	with rules
		REQUEST.CUSTOMER_COUNTRY is ES and GD_Ctr_TaxCode1.Text starts with {P,Q,S} then set value G in GD_Ctr_CustomerClassification
		REQUEST.CUSTOMER_COUNTRY is ES and GD_Ctr_TaxCode1.Text starts with G then set value NG in GD_Ctr_CustomerClassification
		; TODO: RULE FOR FR - LEGAL FORM - REVIEW THIS
		; For customer country France the value is set due to legal form selection, see sheet ""Legal form(France)""  meaning what??????
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS,ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
		REQUEST.CURRENT_ROLE is ROLES.RCO and REQUEST.COUNTRY in {IT, GR} then this enabled 
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_CustomerClassification", "Entity name should be 'GD_Ctr_CustomerClassification' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_AM_BPClassification ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=5, ACTIONS=1, TRIGGERS=1
Entity CC_AM_BPClassification is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_ReleaseGroups
		visible true
		enabled true
		value NORM
		mandatory true
		label LABELS.labCC_AM_BPClassification
	with rules
		REQUEST.COUNTRY in {BE,IT,PT} then			; NOTE: not in fieldmapping
			this mandatory false
		REQUEST.REQUEST_TYPE is CM_BLK then			; NOTE: not in fieldmapping
			this mandatory false	
		REQUEST.CURRENT_ROLE in {ROLES.ENQ, ROLES.RCO, ROLES.CLERK} then 
			this enabled true
		else
			this enable false
		CC_AM_BPClassification.Value in {BPHR, BPMR} then ATTACHMENT mandatory 
		; TODO: CHECK THIS WITH SEB 
		REQUEST.CC_AM_BPClassification is not empty then
			set value REQUEST.CC_AM_BPClassification in CC_AM_BPClassification
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with actions
		; ATTACHMENT mandatory  false
		; _COMMENT_ mandatory  false
	with triggers 
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_AM_BPClassification", "Entity name should be 'CC_AM_BPClassification' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=4, ACTIONS=3, TRIGGERS=1
Entity GD_Adr_Name is TextBox in frmMain
	with defaults
		label LABELS.labName
		mandatory true
		max length 35
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then				; NOTE: not in fieldmapping
			max length 28
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE not in {CC,CC_CC} then		; NOTE: not in fieldmapping
			this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
		set value SUBSTRING(GD_Adr_Name.Value,20) in GD_Adr_Search
		set value GD_Adr_Name.Value in B_GD_VB_AccountHolder
	with triggers 
		this on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name", "Entity name should be 'GD_Adr_Name' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=3, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Name2 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name2", "Entity name should be 'GD_Adr_Name2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name3 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=0, TRIGGERS=0
Entity GD_Adr_Name3 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT7,YVT7} then
			this mandatory true
		REQUEST.CURRENT_ROLE is ROLES.CLERK then
			this mandatory true
		; NOTE: not in fieldmapping
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE in {CC,CC_CC} then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name3", "Entity name should be 'GD_Adr_Name3' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name4 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4
Entity GD_Adr_Name4 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT7,YVT7} then
			this mandatory true
		REQUEST.CURRENT_ROLE is ROLES.CLERK then
			this mandatory true
			; NOTE: not in fieldmapping
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE in {CC,CC_CC} then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name4", "Entity name should be 'GD_Adr_Name4' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Search ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=2
Entity GD_Adr_Search is TextBox in frmMain
	with defaults
		label LABELS.Search
		max length 20
		; put here the first 20 characters of the name (which in creations comes from search screen)
		value GD_Adr_Name.Value
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			max length 5			
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Search", "Entity name should be 'GD_Adr_Search' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_Comment ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1
Entity GD_Com_Comment is TextBox in frmMain
	with defaults
		label LABELS.labComment
		max length 35
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_Comment", "Entity name should be 'GD_Com_Comment' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=3, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street is TextBox in frmMain
	with defaults
		label LABELS.labHouseNumber
		mandatory true
		max length 32
	with rules
		; NOTE: not in fieldmapping
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		; NOTE: not in fieldmapping
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street", "Entity name should be 'GD_Adr_Street' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street2 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street2", "Entity name should be 'GD_Adr_Street2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street3 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street3 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street3", "Entity name should be 'GD_Adr_Street3' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street4 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street4 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street4", "Entity name should be 'GD_Adr_Street4' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street5 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street5 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street5", "Entity name should be 'GD_Adr_Street5' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_CountryGD ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8
Entity GD_Adr_CountryGD is DropDownList in frmMain
	with defaults
		label LABELS.labCountry
		mandatory true
		enable false
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		value REQUEST.CUSTOMER_COUNTRY
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_CountryGD", "Entity name should be 'GD_Adr_CountryGD' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Region ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=10, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Region is DropDownList in frmMain
	with defaults
		label LABELS.labRegion
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Regions with arguments {FlagActive : true, CountryCode : REQUEST.CUSTOMER_COUNTRY }
	with actions
		load data from DATASOURCE.MDMC_CreditControlGroups with arguments { CountryCode : REQUEST.COUNTRY, CompanyCode : REQUEST.COMPANY_CODE, RegionCode : GD_Adr_Region.Value} in KNKK_SBGRP
	with rules
		REQUEST.Region_IsMandatory is true and REQUEST.REQUEST_TYPE is CC then
			GD_Adr_Region mandatory true
		; NOTE: yct1 and yct2 in code, not in fieldmapping
		REQUEST.ACCOUNT_GROUP in {YCT1, YCT2, YCT6, YCT9} and REQUEST.REQUEST_TYPE is CC then
			GD_Adr_Region mandatory true
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region.Value is 01 then
			set value NL in GD_Com_Language
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region.Value in {02, 03} then
			set value FR in GD_Com_Language
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} and GD_Adr_Region.Value is 2A then
			set value 20 in GD_Adr_PostalCode
		REQUEST.ACCOUNT_GROUP in {YCT6,YVT6,YCT9,YVT9} and REQUEST.Region_IsMandatory and REQUEST.TYPE is CC then
			this mandatory true
		REQUEST.COUNTRY is FR then
			this mandatory true
		REQUEST.COUNTRY is BE and GD_Adr_Region.Value is 01 then
			set value NL in GD_Com_LanguageCode
		REQUEST.COUNTRY is BE and GD_Adr_Region.Value is not 01 then
			set value FR in GD_Com_LanguageCode
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Region", "Entity name should be 'GD_Adr_Region' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 10, "Should have '10' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_City ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=1, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_City is TextBox in frmMain
	with defaults
		label LABELS.labCity
		mandatory true
		max length 35
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT7,YVT7} then
			this mandatory true
		REQUEST.CURRENT_ROLE is ROLES.CLERK then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_City", "Entity name should be 'GD_Adr_City' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_City2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=3, ACTIONS=0, TRIGGERS=0
Entity GD_Adr_City2 is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labDistrict
		max length 35
	with rules
		REQUEST.CUSTOMER_COUNTRY is GR or REQUEST.COUNTRY is GR then
			GD_Adr_City2 visible true
		; NOTE: not in fieldmapping
		REQUEST.COUNTRY is GR and REQUEST.CUSTOMER_COUNTRY is not GR and REQUEST.REQUEST_TYPE is not CM_BLK then
			GD_Adr_City2 visible true
			GD_Adr_City2 mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_City2", "Entity name should be 'GD_Adr_City2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_PostalCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=15, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_PostalCode is TextBox in frmMain
	with defaults
		label LABELS.labPostalCode
		mandatory true
		max length 10
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT1, YCT2} then
			max length 4
			validation ^[0-9]{4}$
		REQUEST.ACCOUNT_GROUP in {YCT3, YCT5, YCT7} then
			max length 5
			validation ^[0-9]{5}$
		REQUEST.ACCOUNT_GROUP is YCT4 then
			max length 8
			validation ^[0-9]{4}-[0-9]{3}$
		REQUEST.CUSTOMER_COUNTRY in {IT, GR} then
			max length 5
		REQUEST.CUSTOMER_COUNTRY is ES then
			max length 5
			validation ^[0-5]{1}[1-2]{1}[0-9]{3}$
		; post code must be >=1500 and <=3999 OR >=8000 and <=9999
		; the regular expression covers the ranges
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 01 then
			max length 4
			validation ^(1[5-9][0-9]{2}){1}|((2|3)[0-9]{3}){1}|((8|9)[0-9]{3})$
		; post code must be >=1300 and <=1499 OR >=4000 and <=7999
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 02 then
			max length 4
			validation ^(1[3-4][0-9]{2}){1}|([4-7][0-9]{3})$
		; post code must be >=1000 and <=1299
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 03 then
			max length 4
			validation ^(1[0-2][0-9]{2})$
		REQUEST.CUSTOMER_COUNTRY in {FR, GF, GP, MC, MQ, NC, PF, PM, RE, WF, YT} then
			max length 5
			validation ^[0-9]{5}$
			set value substring(GD_Adr_PostalCode,2) in GD_Adr_Region
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} then
			max length 5
			mandatory true 
		GD_Adr_CountryGD.Value is ES then
			tooltip MESSAGES.ERRSpanishPC5
		GD_Adr_CountryGD.Value is PT then
			tooltip MESSAGES.ERRPortuguesePCFormat
		GD_Adr_CountryGD.Value is IT then
			tooltip MESSAGES.ERRItalianPC5
		REQUEST.CUSTOMER_COUNTRY in {ES,AD} and REQUEST.REQUEST_TYPE in {CC, CC_CC} and GD_Adr_PostalCode.Value.Length >= 2 then
			load data from DATASOURCES.SelectAccountingClerkByPostCodeAndSalesArea in CC_CO_AccountingClerk
		; TODO: PUT THIS VALIDATION IN BTNSAVE 
		; REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
		; make sure then that first two digits are same as value in Region combo	
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_PostalCode", "Entity name should be 'GD_Adr_PostalCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 15, "Should have '15' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_POBox ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=8, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_POBox is TextBox in frmMain
	with defaults
		label LABELS.labPOBox
		max length 10
	with rules
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is not empty then
			GD_Adr_POBoxPostalCode mandatory true
			GD_Adr_POBoxLoc mandatory true
			GD_Adr_POBox mandatory true
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is empty or GD_Adr_POBox.Value is . then
			GD_Adr_POBoxPostalCode mandatory false
			GD_Adr_POBoxLoc mandatory false
			GD_Adr_POBox mandatory false
		REQUEST.ACCOUNT_GROUP in {YVT7,YCT7} then
			max length 5
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc.Value is not empty then
			this mandatory true
		REQUEST.COUNTRY is FR then 
			max length 10
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxPostalCode is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_POBox", "Entity name should be 'GD_Adr_POBox' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 8, "Should have '8' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_POBoxPostalCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=8, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_POBoxPostalCode is TextBox in frmMain
	with defaults
		label LABELS.labBoxPostalCode
		max length 10
	with rules
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is not empty then
			GD_Adr_POBoxPostalCode mandatory true
			GD_Adr_POBoxLoc mandatory true
			GD_Adr_POBox mandatory true
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is empty or GD_Adr_POBox.Value is . then
			GD_Adr_POBoxPostalCode mandatory false
			GD_Adr_POBoxLoc mandatory false
			GD_Adr_POBox mandatory false
		REQUEST.ACCOUNT_GROUP in {YVT7,YCT7} then
			max length 5
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxPostalCode is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc.Value is not empty then
			this mandatory true
			max length 5
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc.Value is not empty then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
;	1) Maxlength 100
;	2) If regional country France -> Maxlength 40
;	3) If customer country belongs to (SAP country code FR GF GP MC MQ NC PF PM RE WF YT): if P.O.Box == empty/""""."""" -> If P.O.Box Postal code != empty -> mandatory
;	4) If customer country belongs to (SAP country code FR GF GP MC MQ NC PF PM RE WF YT): if P.O.Box == empty/""""."""" -> If P.O.Box other city != empty -> mandatory
;	5) If customer country belongs to(SAP country code FR GF GP MC MQ NC PF PM RE WF YT): if P.O.Box != empty -> mandatory""
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_POBoxPostalCode", "Entity name should be 'GD_Adr_POBoxPostalCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 8, "Should have '8' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_LanguageCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=5, ACTIONS=0, TRIGGERS=1
Entity GD_Com_LanguageCode is DropDownList in frmMain
	with defaults
		label LABELS.labLanguages
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Languages with arguments {FlagActive : true}	
		value EN		; default is English
	with rules
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} then
			set value FR in GD_Com_LanguageCode
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region is 01 then
			set value NL in GD_Com_LanguageCode
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region in {02, 03} then
			set value FR in GD_Com_LanguageCode
		; this should come from the MODEL (from the MDMC_Countries table) where ""country configuration"" is set
		REQUEST.DefaultLanguage is not empty then
			set value REQUEST.DefaultLanguage in GD_Com_LanguageCode
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
;	1) by default PRT
;	2) TODO: PRT is the only value available when a creation from scratch is requested"" ; current madam does not work like this....
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_LanguageCode", "Entity name should be 'GD_Com_LanguageCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_Telebox ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=2, ACTIONS=0, TRIGGERS=0
Entity GD_Com_Telebox is DropDownList in frmMain
	with defaults
		label LABELS.labTelebox
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Telebox with arguments {FlagActive : true, AccountGroup : REQUEST.ACCOUNT_GROUP}
		mandatory true
		value PRT
	with rules
		REQUEST.REQUEST_TYPE is CC then
			set value PRT in GD_Com_Telebox
			this enable false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_Telebox", "Entity name should be 'GD_Com_Telebox' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_DataLine ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity GD_Com_DataLine is TextBox in frmMain
	with defaults
		label LABELS.labDataLine
		max length 14
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_DataLine", "Entity name should be 'GD_Com_DataLine' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=1, ACTIONS=1, TRIGGERS=1
Entity P_GD_VT_Country is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		value REQUEST.CUSTOMER_COUNTRY
		mandatory true
	with actions
		load data from DATASOURCE.MDMC_CountryTelephonePrefixes with arguments {Code : P_GD_VT_Country.Value } in P_GD_VT_CountryCode
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_Country", "Entity name should be 'P_GD_VT_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_CountryCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity P_GD_VT_CountryCode is TextBox in frmMain
	with defaults
		label LABELS.labGD_VT_CountryCode
		enable false
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_CountryCode", "Entity name should be 'P_GD_VT_CountryCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_Number ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=0
Entity P_GD_VT_Number is TextBox in frmMain
	with defaults
		max length 30
		label LABELS.labGD_VT_Number
		mandatory true
		; seems enough to allow things like +(34) 123-4567
		validation ^[0-9\-\.()\+\s]+
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_Number", "Entity name should be 'P_GD_VT_Number' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_Extension ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity P_GD_VT_Extension is TextBox in frmMain
	with defaults
		max length 10
		label LABELS.lablabGD_VT_Extension
		; should we include a validation?
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_Extension", "Entity name should be 'P_GD_VT_Extension' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_Notes ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity P_GD_VT_Notes is TextBox in frmMain
	with defaults
		max length 50
		label LABELS.labGD_VT_Notes
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_Notes", "Entity name should be 'P_GD_VT_Notes' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity P_GD_VT_Default is TextBox in frmMain
	with defaults
		; by defaults appears checked and disabled
		value true
		label LABELS.labP_GD_VT_Default
		enabled false
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false		
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_Default", "Entity name should be 'P_GD_VT_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_ConsNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity P_GD_VT_ConsNumber is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labGD_VT_ConsNumber
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_ConsNumber", "Entity name should be 'P_GD_VT_ConsNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity P_GD_VT_btnInsert is Button in frmMain
	with defaults
		label LABELS.btnInsert
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	; TODO: CHECK WITH SEB explicitly clear all textboxes upon insertion? need to indicate this?
; ---------------------------------------------------------------------------- 
; --- TODO: TENTATIVE GRID DEFINITION AND CONVENTIONS
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_btnInsert", "Entity name should be 'P_GD_VT_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_P_GD_VT_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=9, RULES=1, ACTIONS=0, TRIGGERS=3
Entity P_GD_VT_Grid is Grid in frmMain
	with defaults
		; TODO: how to define or set the controls inside? the row definition?
		define column GRID_P_GD_VT_Country		with arguments {ControlType : DropDownList, DataField : GD_VT_Country, Header : LABELS.labCountry, DataSource: DATASOURCE.MDMC_Countries, Visible : true}
		define column GRID_P_GD_VT_CountryCode	with arguments {ControlType : TextBox,		DataField : GD_VT_CountryCode, Header : LABELS.labPrefix, Enabled : false, Visible : true}
		define column GRID_P_GD_VT_Number		with arguments {ControlType : TextBox,		DataField : GD_VT_Number, Header : LABELS.labNumber, Constraints : Only_Numbers, Visible : true}
		define column GRID_P_GD_VT_Extension	with arguments {ControlType : TextBox,		DataField : GD_VT_Extension, Header : LABELS.labExtension, Constraints : Only_Numbers, Visible : true}
		define column GRID_P_GD_VT_Notes		with arguments {ControlType : TextBox,		DataField : GD_VT_Notes, Header : LABELS.labNotes, Visible : true}
		define column GRID_P_GD_VT_Default		with arguments {ControlType : CheckBox,		DataField : GD_VT_Default, Header : LABELS.labDefault, Constraints : Only_Numbers, Visible : true}
		define column GRID_P_GD_VT_ConsNumber	with arguments {ControlType : TextBox,		DataField : GD_VT_ConsNumber, Visible : false}
	with rules
		; REQUEST.CURRENT_ROLE in {ROLES.UPM, ROLES.CPM, ROLES.RCO, ROLES.SUS, ROLES.CLERK} then
		; 	load data from DATASOURCE.MDMC_Request_CustomerPhoneDetails with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		; REQUEST.CURRENT_ROLE is ROLES.ENQ and REQUEST.REQUEST_TYPE is not VC then
		; 	load data from DATASOURCE.MDMC_Request_CustomerPhoneDetailsSAP with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		on row inserted
		on row deleted
		on row updated
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "P_GD_VT_Grid", "Entity name should be 'P_GD_VT_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 9, "Should have '9' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 3, "Should have '3' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=1, TRIGGERS=1
Entity F_GD_VF_Country is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		value REQUEST.CUSTOMER_COUNTRY
	with actions
		load data from DATASOURCE.MDMC_CountryTelephonePrefixes with arguments {Code : F_GD_VF_Country.Value } in F_GD_VF_CountryCode
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_Country", "Entity name should be 'F_GD_VF_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_CountryCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity F_GD_VF_CountryCode is TextBox in frmMain
	with defaults
		label LABELS.labGD_VF_CountryCode
		enable false
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_CountryCode", "Entity name should be 'F_GD_VF_CountryCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_Number ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=1, ACTIONS=0, TRIGGERS=0
Entity F_GD_VF_Number is TextBox in frmMain
	with defaults
		max length 30
		validation ^[0-9\-\.()\+\s]+
		label LABELS.labGD_VF_Number
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false			
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_Number", "Entity name should be 'F_GD_VF_Number' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_Extension ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity F_GD_VF_Extension is TextBox in frmMain
	with defaults
		label LABELS.labGD_VF_Extension
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_Extension", "Entity name should be 'F_GD_VF_Extension' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_Notes ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity F_GD_VF_Notes is TextBox in frmMain
	with defaults
		max length 50
		label LABELS.labGD_VF_Notes
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false			
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_Notes", "Entity name should be 'F_GD_VF_Notes' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_ConsNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity F_GD_VF_ConsNumber is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labGD_VF_ConsNumber
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_ConsNumber", "Entity name should be 'F_GD_VF_ConsNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity F_GD_VF_Default is TextBox in frmMain
	with defaults
		value false
		label LABELS.labGD_VF_Default
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false			
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_Default", "Entity name should be 'F_GD_VF_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity F_GD_VF_btnInsert is Button in frmMain
	with defaults
		label LABELS.btnInsert
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_btnInsert", "Entity name should be 'F_GD_VF_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_F_GD_VF_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=9, RULES=1, ACTIONS=0, TRIGGERS=3
Entity F_GD_VF_Grid is Grid in frmMain
	with defaults
		; TODO: how to define or set the controls inside? the row definition?
		define column GRID_F_GD_VF_Country		with arguments {ControlType : DropDownList, DataField : GD_VF_Country, Header : LABELS.labCountry, DataSource: DATASOURCE.MDMC_Countries, Visible : true}
		define column GRID_F_GD_VF_CountryCode	with arguments {ControlType : TextBox,		DataField : GD_VF_CountryCode, Header : LABELS.labPrefix, Enabled : false, Visible : true}
		define column GRID_F_GD_VF_Number		with arguments {ControlType : TextBox,		DataField : GD_VF_Number, Header : LABELS.labNumber, Constraints : Only_Numbers, Visible : true}
		define column GRID_F_GD_VF_Extension	with arguments {ControlType : TextBox,		DataField : GD_VF_Extension, Header : LABELS.labExtension, Constraints : Only_Numbers, Visible : true}
		define column GRID_F_GD_VF_Notes		with arguments {ControlType : TextBox,		DataField : GD_VF_Notes, Header : LABELS.labNotes, Visible : true}
		define column GRID_F_GD_VF_Default		with arguments {ControlType : CheckBox,		DataField : GD_VF_Default, Header : LABELS.labDefault, Constraints : Only_Numbers, Visible : true}
		define column GRID_F_GD_VF_ConsNumber	with arguments {ControlType : TextBox,		DataField : GD_VF_ConsNumber, Visible : false}
	with rules
		REQUEST.CURRENT_ROLE in {ROLES.UPM, ROLES.CPM, ROLES.SUS, ROLES.RCO, ROLES.CLERK} then
			load data from DATASOURCE.MDMC_Request_CustomerFaxDetails with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		REQUEST.CURRENT_ROLE is ROLES.ENQ and REQUEST.REQUEST_TYPE is not VC then
			load data from DATASOURCE.MDMC_Request_CustomerFaxDetailsSAP with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		on row inserted
		on row deleted
		on row updated
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "F_GD_VF_Grid", "Entity name should be 'F_GD_VF_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 9, "Should have '9' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 3, "Should have '3' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_E_GD_VE_SmtpAddr ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=0
Entity E_GD_VE_SmtpAddr is TextBox in frmMain
	with defaults
		tooltip MESSAGES.MSGEmailSupplier
		label LABELS.labGD_VE_SmtpAddr
		max length 241
		mandatory true
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "E_GD_VE_SmtpAddr", "Entity name should be 'E_GD_VE_SmtpAddr' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_E_GD_VE_Notes ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity E_GD_VE_Notes is TextBox in frmMain
	with defaults
		max length 50
		label LABELS.labGD_VE_Notes
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "E_GD_VE_Notes", "Entity name should be 'E_GD_VE_Notes' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_E_GD_VE_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity E_GD_VE_Default is TextBox in frmMain
	with defaults
		value false
		label LABELS.labGD_VE_Default
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false			
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "E_GD_VE_Default", "Entity name should be 'E_GD_VE_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_E_GD_VE_ConsNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity E_GD_VE_ConsNumber is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labGD_VE_ConsNumber
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "E_GD_VE_ConsNumber", "Entity name should be 'E_GD_VE_ConsNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_E_GD_VE_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity E_GD_VE_btnInsert is Button in frmMain
	with defaults
		label LABELS.labInsert
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this visible false		
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "E_GD_VE_btnInsert", "Entity name should be 'E_GD_VE_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_E_GD_VE_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=0
Entity E_GD_VE_Grid is Grid in frmMain
	with defaults
		; TODO: how to define or set the controls inside? the row definition?
		define column GRID_E_GD_VE_SmtpAddr		with arguments {ControlType : TextBox,		DataField : GD_VE_SmtpAddr, Header : LABELS.labNumber, Constraints : Only_Numbers, Visible : true}
		define column GRID_E_GD_VE_Notes		with arguments {ControlType : TextBox,		DataField : GD_VE_Notes, Header : LABELS.labNotes, Visible : true}
		define column GRID_E_GD_VE_Default		with arguments {ControlType : CheckBox,		DataField : GD_VE_Default, Header : LABELS.labDefault, Constraints : Only_Numbers, Visible : true}
		define column GRID_E_GD_VE_ConsNumber	with arguments {ControlType : TextBox,		DataField : GD_VE_ConsNumber, Visible : false}
	with rules
		; REQUEST.CURRENT_ROLE in {ROLES.UPM, ROLES.CPM, ROLES.SUS,  ROLES.RCO, ROLES.CLERK} then
		; 	load data from DATASOURCE.MDMC_Request_CustomerEmailDetails with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		; REQUEST.CURRENT_ROLE is ROLES.ENQ and REQUEST.REQUEST_TYPE is not VC then
		; 	load data from DATASOURCE.MDMC_Request_CustomerEmailDetailsSAP with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		on row inserted
		on row deleted
		on row updated
	; TODO: AGAIN CHECK WITH SEB
; ----------------------------------------------------------------------------	
;	TODO: DO THIS SOMEWHERE ELSE - CHECK WITH SEB TOO
;	TODO: 24-07-2014(RG): 1) before send data to SAP to create/modify supplier ->
;	search if vendor exists with the same taxcode (STCD1), 
;	if exists get the number to send to SAP in KNA1.LIFNR. If it appears more than one code, 
;	select the first one and send a warning message to GSS Master Data stating that ""there are multiple partners"" 
;	if there are more than one code 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "E_GD_VE_Grid", "Entity name should be 'E_GD_VE_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_VendorNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=0
Entity GD_Ctr_VendorNumber is TextBox in frmMain
	with defaults
		label LABELS.labCustomerNumber
		max length 10
	with rules
		REQUEST.REQUEST_TYPE is CC then
			this visible false
		else
			this visible true
; ---------------------------------------------------------------------------- 
;	field visible for all roles.
;	2) field mandatory for  MD clerk in case account group YCT6. 
;		(See APE list in sheet """"Other documents"""" to display DDL to select the legal activity and translate from ISIC code in SAP). 
;	3) for account group YCT5, use DDL the excel file attached called """"ISIC italian convertion"""". 
;		the DDL shown to the ROLES.ENQ is the collumn C and should then insert specific data in field KNA1-BRSCH and KNA1-BRAN1
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_VendorNumber", "Entity name should be 'GD_Ctr_VendorNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_Industry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=2, ACTIONS=1, TRIGGERS=1
Entity GD_Ctr_Industry is DropDownList in frmMain
	with defaults
		mandatory true
		visible true
		label LABELS.labIndustries
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Industries with arguments {FlagActive: true, Country : REQUEST.COUNTRY}
	with actions
		; put the return of this search operation which should return only one value in control GD_Ctr_IindustryCode
		load data from DATASOURCE.MDMC_ItalyIndustries with output {GD_Ctr_IndustryCode.Value : KNA1_BRAN1}
	with rules
		; REQUEST.ACCOUNT_GROUP in {YCT6, YVT6} then
		; 	load data from DATASOURCE.MDMC_Industries with arguments {FlagActive: true, Country : FR}
		; 	; this equals to this line in original code
		; 	; TODO: WHY? this.m_mdmSessionInfo.IndustryCountry = Business.Constants.Countries.France;
		; 	; most likely unneeded?
		; 	; set value FR in REQUEST.INDUSTRY_COUNTRY
		REQUEST.ACCOUNT_GROUP in {YCT6, YVT6} and REQUEST.CURRENT_ROLE is ROLES.RCO then
			this mandatory true
		; REQUEST.ACCOUNT_GROUP in {YCT9, YVT9} then
		; 	load data from DATASOURCE.MDMC_Industries with arguments {FlagActive: true, Country : ""EN""}
		; 	; this.m_mdmSessionInfo.IndustryCountry = Business.Constants.Countries.France;
		; 	; set value ""EN"" in REQUEST.INDUSTRY_COUNTRY
		; 	mandatory false
		; DONE with a updating of the table MDMC_INdustries - NO NEED TO DO THIS FOR BRSCH, ONLY FOR BRAN1
		; REQUEST.COUNTRY is IT and GD_Ctr_Industry is not empty then
		; 	;	3) for account group YCT5, use DDL the excel file attached called """"ISIC italian convertion"""". 
		; 	;		the DDL shown to the ROLES.ENQ is the collumn C and should then insert specific data in field KNA1-BRSCH and KNA1-BRAN1
		; 	load data from DATASOURCE.MDMC_ItalyIndustries with arguments {FlagActive: true, Code:GD_Ctr_Industry.Value} with output {GD_Ctr_IndustryCode.Value : KNA1_BRAN1} 
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE is ROLES.SUS or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_Industry", "Entity name should be 'GD_Ctr_Industry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_IndustryCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=0
Entity GD_Ctr_IndustryCode is DropDownList in frmMain
	; always like this except for Italy
	with defaults
		enabled false
		visible false
		label LABELS.lblIndustryCode
		data field DisplayValue
		value field KNA1_BRSCH
		load data from DATASOURCE.MDMC_ItalyIndustries
	with rules
		REQUEST.COUNTRY is IT then
			this visible true
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_IndustryCode", "Entity name should be 'GD_Ctr_IndustryCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_UnsubscribeCMD ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, ACTIONS=1, TRIGGERS=1
Entity GD_Ctr_UnsubscribeCMD is DropDownList in frmMain
	with defaults
		label LABELS.labUnsubscribeCMD
		data field DisplayName
		value field Code
		load data from DATASOURCE.UnsubscribeOptions
	with actions
		set value GD_Ctr_UnsubscribeCMD.Value in BLK_GD_Ctr_UnsubscribeCMD
	with rules
		REQUEST.REQUEST_TYPE is CC then
			this enable false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_UnsubscribeCMD", "Entity name should be 'GD_Ctr_UnsubscribeCMD' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=0
Entity V_Country is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labCountry
		load data from DATASOURCE.MDMC_Countries
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "V_Country", "Entity name should be 'V_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_VATNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity V_VATNumber is TextBox in frmMain
	with defaults
		label LABELS.labNumber
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "V_VATNumber", "Entity name should be 'V_VATNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity V_btnInsert is Button in frmMain
	with defaults
		label LABELS.labInsert
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this visible false	
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "V_btnInsert", "Entity name should be 'V_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=3
Entity V_Grid is Grid in frmMain
	with defaults
		define column GRID_V_Country		with arguments {ControlType : DropDownList, DataField : Country, Header : LABELS.labCountry, DataSource: DATASOURCE.MDMC_Countries, Visible : true}
		define column GRID_V_VATNumber		with arguments {ControlType : TextBox,		DataField : VATNumber, Header : LABELS.labVATNumber, Visible : true}
	with rules
		; REQUEST.CURRENT_ROLE in {ROLES.UPM, ROLES.CPM, ROLES.SUS, ROLES.RCO, ROLES.CLERK} then
		; 	load data from DATASOURCE.MDMC_Request_CustomerVAT with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		; REQUEST.CURRENT_ROLE is ROLES.ENQ and REQUEST.REQUEST_TYPE is not VC then
		; 	load data from DATASOURCE.MDMC_Request_CustomerVATSAP with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		on row inserted
		on row deleted
		on row updated
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "V_Grid", "Entity name should be 'V_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 3, "Should have '3' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_IsNaturalPerson ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=5, ACTIONS=1, TRIGGERS=1
Entity GD_Ctr_IsNaturalPerson is CheckBox in frmMain
	with defaults
		label LABELS.labGD_Ctr_IsNaturalPerson
		value false
	with rules
		; TODO: MISSING FRANCE PARTNER AND REGIONAL DUE TO LEGAL FORM - CHECK LATER
		; ALL FIELDS IN	DIV_ADDITIONAL_INFO_NATURAL_PERSON mandatory
		REQUEST.COUNTRY is ES and GD_Ctr_TaxCode1.Value starts with {P, Q, S} then 
			set value false in GD_Ctr_IsNaturalPerson
			set value G in GD_Ctr_CustomerClassification
		REQUEST.COUNTRY is ES and GD_Ctr_TaxCode1.Value starts with {X,1,2,3,4,5,6,7,8,9} then 
			set value true in GD_Ctr_IsNaturalPerson 
			set value NG in GD_Ctr_CustomerClassification
		REQUEST.CURRENT_ROLE is ROLES.RCO then
			GD_Ctr_IsNaturalPerson enabled true
		REQUEST.CURRENT_ROLE in {ROLES.ENQ, ROLES.RCO, ROLES.CLERK} then 
			this enabled true
		else
			this enabled false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_IsNaturalPerson", "Entity name should be 'GD_Ctr_IsNaturalPerson' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Surname ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_Surname is TextBox in frmMain
	with defaults
		label LABELS.labCP_Surname
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Surname", "Entity name should be 'CP_Surname' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Name ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_Name is TextBox in frmMain
	with defaults
		label LABELS.labCP_Name
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Name", "Entity name should be 'CP_Name' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Department ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_Department is DropDownList in frmMain
	with defaults
		label LABELS.labCP_Department
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Department with arguments {FlagActive : true}
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Department", "Entity name should be 'CP_Department' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Telephone ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_Telephone is TextBox in frmMain
	with defaults
		label LABELS.labCP_Phone
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Telephone", "Entity name should be 'CP_Telephone' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Fax ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_Fax is TextBox in frmMain
	with defaults
		label LABELS.labCP_Fax
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Fax", "Entity name should be 'CP_Fax' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Email ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_Email is TextBox in frmMain
	with defaults
		label LABELS.labCP_Email
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Email", "Entity name should be 'CP_Email' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_Default is CheckBox in frmMain
	with defaults
		label LABELS.labCP_Default
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
; ---------------------------------------------------------------------------- 
; TODO: CHECK WITH SEB, DO WE NEED TO SPECIFY BUTTONS AND BEHAVIOUR (GRID INSERTION) WHAT ABOUT 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Default", "Entity name should be 'CP_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=0
Entity CP_btnInsert is Button in frmMain
	with defaults
		label LABELS.btnInsert
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this visible false	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_btnInsert", "Entity name should be 'CP_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=10, RULES=2, ACTIONS=0, TRIGGERS=3
Entity CP_Grid is Grid in frmMain
	with defaults
		define column GRID_CP_Name				with arguments {ControlType : TextBox, DataField : Name, Header : LABELS.labName, MaxLength : 100, Visible : true}
		define column GRID_CP_Surname			with arguments {ControlType : TextBox, DataField : Surname, Header : LABELS.labSurname, MaxLength : 100, Visible : true}
		define column GRID_CP_Department		with arguments {ControlType : TextBox, DataField : Deparment, Header : LABELS.labDepartment, Visible : true}
		define column GRID_CP_Telephone			with arguments {ControlType : TextBox, DataField : Telephone, Header : LABELS.labBankControlKey, Visible : true}
		define column GRID_CP_Fax				with arguments {ControlType : TextBox, DataField : Fax, Header : LABELS.labFax, Visible : true}
		define column GRID_CP_Email				with arguments {ControlType : TextBox, DataField : Email, Header : LABELS.labEmail, Visible : true}
		define column GRID_CP_KNVK_NAME1		with arguments {ControlType : TextBox, DataField : KNVK_NAME1, Visible : false}
		define column GRID_CP_Default			with arguments {ControlType : CheckBox,	DataField : Default, Visible : true}
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		; REQUEST.CURRENT_ROLE in {ROLES.UPM, CPM, ROLES.SUS, ROLES.RCO, ROLES.CLERK} then
		; 	load data from DATASOURCE.MDMC_Request_ContactPersons with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		; REQUEST.CURRENT_ROLE is ROLES.ENQ and REQUEST.REQUEST_TYPE is not VC then
		; 	load data from DATASOURCE.MDMC_Request_ContactPersonsSAP with arguments {""RequestID"" : REQUEST.REQUEST_ID}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false		
	with triggers
		; TODO: CHECK WITH SEB DO WE REALLY NEED THIS?
		on row inserted
		on row deleted
		on row updated
; ----------------------------------------------------------------------------	
; --- LIST OF PURCHASE ORGANIZATION SELECTION IN THE PURCHASE ORG TAB --------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Grid", "Entity name should be 'CP_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 10, "Should have '10' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 3, "Should have '3' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

	}
}