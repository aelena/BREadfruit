using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BREadfruit.Exceptions;
using NUnit.Framework;
using BREadfruit.Helpers;
using BREadfruit.Conditions;
/* ************************************************************
 *                                                            *
 * AUTOGENERATED ON : 19/01/2015 8:09:50	
 *                                                            *
************************************************************* */
namespace BREadfruit.Tests.Autogenerated
{
	[TestFixture]
	public class CustomerEntities
	{
		[Test]
		public void TestEntity_rbSpiridon ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity rbSpiridon is RadioButton in frmSearch
	with defaults
		enabled false
		label ""Spiridon""
		value true				; means checked
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "rbSpiridon", "Entity name should be 'rbSpiridon' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_rbEPass ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity rbEPass is RadioButton in frmSearch
	with defaults
		enabled false
		label ""Epass""
		value false				; means unchecked
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "rbEPass", "Entity name should be 'rbEPass' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerName ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerName is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerName
		value   ''
	with actions
		hide btnCreateCustomer
		clear CustomerSearchResultGrid
		set hidden CustomerSearchResultGrid
	with rules
	with triggers
		TBCustomerName.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerName", "Entity name should be 'TBCustomerName' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerCity ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerCity is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerCity
		value   ''
	with actions
		hide btnCreateCustomer
		set hidden CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
	with triggers
		TBCustomerName.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerCity", "Entity name should be 'TBCustomerCity' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=3, RULES=2, TRIGGERS=1
Entity TBCustomerNumber is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerNumber
		value   ''
		min length 10
		max length 10
		validation ^[0-9]{10}$
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
		; show this message ""This partner is not managed by Madam. Please contact GSS master data team."" if starting with 0
		TBCustomerNumber.text starts with '0' then
			set value MESSAGES.ERRPartnerNotManaged in MESSAGE_POPUP
		TBCustomerNumber.text not starts with '0' then
			set value '' in MESSAGE_POPUP
	with triggers
		this.value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerNumber", "Entity name should be 'TBCustomerNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerIFA ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=3, RULES=2, TRIGGERS=1
Entity TBCustomerIFA is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerIFA
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
		; should this be moved to rules for the btnSearch button? maybe.....
		TBCustomerIFA.value is not '' then DDLDCountry not mandatory
		TBCustomerIFA.value is '' then DDLDCountry mandatory
	with triggers
		this.value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerIFA", "Entity name should be 'TBCustomerIFA' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLDCountry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=5, RULES=4, TRIGGERS=1
Entity DDLDCountry is DropDownList in frmSearch
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		label LABELS.labCountry
		value USER.COUNTRY		; preselect user country if there is data in SCD for this user
		data field DisplayName
		value field Code
	with actions
		set value '' in MESSAGE_POPUP
		hide CustomerSearchResultGrid
		hide btnCreateCustomer
		load data from DATASOURCE.MDMC_Countries 
		clear CustomerSearchResultGrid
	with rules
		DDLCDCountry.Value in {FR,GF,GP,RE,MQ,YT,NC,PF,PM,WF,MC} then label LABELS.labSIRET in TBVendorVAT
		DDLCDCountry.Value in {PT,ES} then label LABELS.labNIF in TBVendorVAT
		DDLCDCountry.Value is IT then label LABELS.labPartitaIVA in TBVendorVAT
		DDLCDCountry.Value not in {PT,ES,IT,FR,GF,GP,RE,MQ,YT,NC,PF,PM,WF,MC} then label LABELS.labVAT in TBVendorVAT
	with triggers
		this.value changes 
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLDCountry", "Entity name should be 'DDLDCountry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 5, "Should have '5' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerVAT ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerVAT is TextBox in frmSearch
	with defaults
		value ''
		label LABELS.labCustomerVAT
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with triggers
		this.value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerVAT", "Entity name should be 'TBCustomerVAT' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDCountry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, ACTIONS=7, RULES=0, TRIGGERS=1
Entity DDLCDCountry is DropDownList in frmSearch
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labCountry
		value USER.COUNTRY		; preselect user country if there is data in SCD for this user
		load data from DATASOURCE.MDMC_ClusterCountries
		mandatory true
	with actions
		; load active companies for this country
		load data from DATASOURCE.MDMC_ClusterCompanies with arguments {CountryCode : this.Value} in DDLCDCompany
		; purge the data in this dropdownlist
		clear DDLCDSalesOrg
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		load data from DATASOURCE.MDMC_ClusterDistributionChannels with arguments {Country: DDLCDCountry.Value, Company:DDLCDCompany.Value, SalesOrg:DDLCDSalesOrg.Value} in DDLCDDistribChannel
		DDLCDDistribChannel visible true
		hide btnCreateVendor
	with triggers
		this.value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDCountry", "Entity name should be 'DDLCDCountry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 7, "Should have '7' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDCompany ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7	, ACTIONS=4, RULES=0, TRIGGERS=1
Entity DDLCDCompany is DropDownList in frmSearch
	with defaults
		label LABELS.labCompany
		mandatory true
		data field DisplayName
		value field Code
		value USER.COST_LOCATION_UNIT			; another data constant
	with actions
		; load active companies for this country
		load data from DATASOURCE.MDMC_ClusterSalesOrganizations with arguments {CompanyCode: DDLCDCompany.Value} in DDLCDSalesOrg 
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with triggers
		this.value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDCompany", "Entity name should be 'DDLCDCompany' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 4, "Should have '4' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDSalesOrg ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=4, RULES=0, TRIGGERS=1
Entity DDLCDSalesOrg is DropDownList in frmSearch
	with defaults
		label LABELS.labSalesOrg
		value ''
		mandatory true
		data field DisplayName
		value field Code
	with actions
		; load active companies for this country
		; this means the current ìmplementation needs to change a bit...
		; TODO: REORGANIZE THE TABLE TO REFLECT THIS CHANGES IN TEH VALUES LOADED IN THIS DIST CHANNEL COMBO ISNTEAD OF REMOVING BY CODE
		load data from DATASOURCE.SelectDistributionChannels with arguments {countrycode : DDLCDCountry.Value, companycode :DDLCDCompany.Value, salesorgcode :DDLCDSalesOrg.Value} in DDLCDDistribChannel
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with triggers
		this.value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDSalesOrg", "Entity name should be 'DDLCDSalesOrg' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 4, "Should have '4' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDDistribChannel ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity DDLCDDistribChannel is DropDownList in frmSearch
	with defaults
		label LABELS.labDistribChannel
		data field DisplayName
		value field Code
	with actions
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with triggers
		this.value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDDistribChannel", "Entity name should be 'DDLCDDistribChannel' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDivision ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=0, RULES=3, TRIGGERS=0
Entity DDLCDivision is DropDownList in frmSearch
	with defaults
		visible false
		label LABELS.labDivision
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Divisions with arguments {ClusterCountryCode: DDLCDCountry.Value, ClusterCompanyCode : DDLCDCompany.Value, ClusterSalesOrganization : DDLCDSalesOrg.Value, FlagActive : true }
	; TODO: WHEN DOES THIS CONTROL BECOME VISIBLE
	with rules
		DDLCDivision is visible and DDLCDivision is empty then
			DDLCDivision mandatory
		DDLCDivision.Count > 0 then
			this visible true
		DDLCDivision.Count <= 0 then
			this visible false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDivision", "Entity name should be 'DDLCDivision' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnSearch ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=0, RULES=1, TRIGGERS=1
Entity btnSearch is Button in frmSearch
	with defaults
		label LABELS.btnSearch
	with rules
		; yes, teh function defines the last parameter as ClusterPOCode, not ClusterSOCode, so this is right
		DATASOURCE.IsUserInROLE with arguments { UserAccount : USER.USER_ACCOUNT, RoleCode : USER.CURRENT_ROLE, ClusterCountryCode : DDLCDCountry.Value, ClusterCompanyCode : DDLCDCompany.Value, ClusterPOCode : DDLCDSalesOrg.Value } is false then
			set value 'XXXXXXXXXXXXXXXXXX' in MESSAGE_POPUP
		else
			TBCustomerIFA.value is not empty then DDLDCountry mandatory
			DDLDCountry is empty then
				set value MESSAGES.VALIDATIONS.SEARCH.FILL01 in MESSAGE_POPUP
			TBCustomerName is empty and TBCustomerCity is empty and TBCustomerIFA is empty then
				set value MESSAGES.VALIDATIONS.SEARCH.FILL01 in MESSAGE_POPUP
			TBCustomerName is empty and TBCustomerCity is empty and TBCustomerIFA is empty and DDLDCountry is empty and TBCustomerVAT is empty then
				set value MESSAGES.VALIDATIONS.SEARCH.FILL02 in MESSAGE_POPUP
			TBCustomerName is empty and TBCustomerCity is not empty and TBCustomerName is empty and TBCustomerIFA is empty and DDLDCountry is empty and TBCustomerVAT is empty then
				set value MESSAGES.VALIDATIONS.SEARCH.FILL01 in MESSAGE_POPUP
			DDLCDCountry is empty or DDLCDCompany is empty or DDLCDSalesOrg is empty then
				; message: Fill fields Country, Company and Sales Organization
				set value MESSAGES.VALIDATIONS.SEARCH.FILL03 in MESSAGE_POPUP
			TBCustomerName is not empty and DDLDCountry is empty then
				set value MESSAGES.VALIDATIONS.SEARCH.FILL01 in MESSAGE_POPUP
			DDLCDivision is visible and DDLCDivision is empty then
				; show this message : Fill the field of Division Country
				set value MESSAGES.VALIDATIONS.SEARCH.FILL01 in MESSAGE_POPUP
			; this Company is deactivated for the moment
			; DLCDCompany.Company is 563M and DDLCDCountry is empty or DDLCDCompany is empty then
			;	; show this message : Fill fields Country and Company
			;	set value MESSAGES.ERRCountryCompanyField in MESSAGE_POPUP
			load data from WEBSERVICE.CUSTOMER_SEARCH_SERVICE with arguments {CustomerName:TBCustomerName.Value, CustomerCity:TBCustomerCity, CustomerNumber:TBCustomerNumber.Value, CustomerCountry:DDLVDCountry.Value,TaxCode1:TBCustomerVAT.Value,TaxCode4:TBCustomerIFA.Value, Country:DDLDCountry.Value, CompanyCode:DDLCDCompany.Value, SalesOrganization:DDLCDSalesOrg.Value, Division:DDLCDivision } in CustomerSearchResultGrid
	with triggers
		this on click	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "btnSearch", "Entity name should be 'btnSearch' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnCreateCustomer ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=1, RULES=0, TRIGGERS=1
Entity btnCreateCustomer is Button in frmSearch
	with defaults
		label LABELS.btnCreateCustomer
	with actions
		; transition to the main form
		; TODO : guess we will have to pass some arguments here and map things to the conceptual model
		; TODO: PROBABLY NOT NEEDED
		; change form to frmMain with arguments {""A"" : ""B""}
	with rules
		; how to specify all that happens server side here?
		; shall be express something like change form?
	with triggers
		this click
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "btnCreateCustomer", "Entity name should be 'btnCreateCustomer' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_LBLSearchResultMessage ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=2
Entity LBLSearchResultMessage is Label in frmSearch
	with defaults
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "LBLSearchResultMessage", "Entity name should be 'LBLSearchResultMessage' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 2, "Should have '2' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CustomerSearchResultGrid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=2
Entity CustomerSearchResultGrid is Grid in frmSearch
	with defaults
		visible false
	; TODO: DEFINE CONVENTIONS FOR GRID BETTER
	; MISSING ACTIOSN ON GRID BUTTONS
; ----------------------------------------------------------------------------	
;     END OF SEARCH FORM DEFINITION
; ----------------------------------------------------------------------------	
; ----------------------------------------------------------------------------	
; BEGIN MAIN FORM CONTROL DEFINITION
; ----------------------------------------------------------------------------	
; ----------------------------------------------------------------------------
;  -- LIST OF ALL ENTITIES FOUND in MDMC main FORM
; ----------------------------------------------------------------------------
; TODO: PENDING STUFF LIKE THE COMPOSITE CONTROLS-... FOR EXAMPLE CONTACT PERSONS ETC.....
;		AND TELEPHONES, EMAIL, ETC
;	labOpInfoCustomer
;	labOpInfoCountry
;	labOpInfoCC
;	labOpInfoSO
;	labOpInfoDC
;	GD_Adr_Name
;	GD_Adr_Name2
;	GD_Adr_Name3
;	GD_Adr_Name4
;	GD_Adr_Search
;	GD_Com_Comment
;	GD_Adr_Street
;	GD_Adr_Street2
;	GD_Adr_Street3
;	GD_Adr_Street4
;	GD_Adr_Street5
;	GD_Adr_CountryGD
;	GD_Adr_Region
;	GD_Adr_City
;	GD_Adr_City2
;	GD_Adr_PostalCode
;	GD_Adr_POBox
;	GD_Adr_POBoxPostalCode
;	GD_Adr_POBoxLoc
;	GD_Com_LanguageCode
;	GD_Com_Telebox
;	GD_Com_DataLine
;	GD_Ctr_CustomerNumber
;	GD_Ctr_Industry
;	GD_Ctr_UnsubscribeCMD
;	GD_Ctr_GFORM
;	GD_Ctr_PIVA
;	GD_Ctr_CF
;	GD_Ctr_VendorNumber
;	GD_Ctr_IFANumber
;	GD_Ctr_TaxCode1
;	GD_Ctr_TaxCode2
;	GD_Ctr_VATRegistrationNumber
;	labGD_MainlyMilitary
;	labGD_MainlyCivilian
;	GD_Nuclear
;	labGD_FreeZone
;	labGD_Embassy
;	GD_Nat_NaturalPerson
;	GD_Nat_BirthDate
;	GD_Nat_PlaceOfBirth
;	GD_Nat_Profession
;	GD_Nat_Sex
;	CC_CO_ReconAccount
;	CC_PT_PaymentTerms
;	CC_PT_PaymentMethods
;	CC_PT_ClearingWithCustomer
;	CC_PT_IndividualPayment
;	CC_CO_AccountingClerk
;	CC_DD_DunningProcedure
;	CC_DD_DunningArea
;	CC_AR_PledgeIndicator
;	KNVV_BZIRK
;	SO_CustomerGroup
;	SO_SalesOffice
;	KNVV_EIKTO
;	KNVV_VKGRP
;	SO_SalesOrderCurrency
;	KNVV_KONDA
;	KNVV_PLTYP
;	SO_CustPricingProc
;	SO_CustomerStatsGroup
;	SO_CustomerShippingConditions
;	KNVV_VWERK
;	KNVV_AUTLF
;	KNVV_ANTLF
;	KNVV_LPRIO
;	KNVV_KZTLF
;	KNVV_PRFRE
;	SO_Incoterms
;	SO_IncotermsPart2
;	SO_TermsOfPaymentKey
;	KNVV_KTGRD
;	SO_TaxClassification
;	KNKK_SBGRP
;	KNVV_KVGR1
;	KNVV_KVGR2
;	KNVV_KVGR3
;	KNVV_KVGR4
;	KNVV_KVGR5
;	KNKK_KNKLI
;	KNKK_KLIMK
;	KNKK_CTLPC
;	KNKK_DTREV
;	KNKK_NXTRV
;	KNKK_KRAUS
;	KNKK_DBRTG
;	KNKK_REVDB
;	KNKK_DBEKR
;	btnBlockAll
;	btnUnblockAll
;	BLK_GD_Ctr_UnsubscribeCMD
;	labCentralPostingBlock
;	BLK_CentralPostingBlock
;	labPostBlockingForCompanyCode
;	BLK_PostingBlockForCC
;	BLK_CentralSalesOrderBlock
;	BLK_OrdersBlockAtSalesArea
;	BLK_CentralDeliveriesBlock
;	BLK_DeliveriesBlockAtSalesArea
;	BLK_CentralBillingBlock
;	BLK_BillingBlockAtSalesArea
;	labCentralSalesSupportBlock
;	BLK_CentralSalesSupportBlock
;	labCentralSalesSupportBlockAtThisSalesArea
;	BLK_CentralSalesSupportBlockAtSalesArea
;	labCentralDelMasterRecord
;	BLK_CentralDeletionFlagMasterRecord
;	labDelFlagMasterCompanyCode
;	BLK_DeletionFlagMasterRecordCC
;	labDelFlagAtThisSalesArea
;	BLK_DeletionFlagMasterRecordSA
;	labCentralDelBlockMaster
;	BLK_CentralDeletionBlockMasterRecord
;	labDelBlockMasterCompany
;	BLK_DeletionBlockMasterRecordCC
;	TS_IsUrgentRequest
;	CostCenter
;	DDLDCReqAction
;	GD_SAPNumber
;	labNextRole
;	labNextAction
;	DDLDCComment
;	btnSubmit
;	btnClose
;	MADAM_MESSAGE_POPUP
;	GD_Ctr_RiskClassification
;	GD_Adr_Country
;	GD_Ctr_CustomerClassification
;	CC_AM_BPClassification
;	GD_Damex
;	GD_Ctr_IsNaturalPerson
;	labGD_DamexNote
;	ATTACHMENT
;	AttachHistory
;	SAP_Message
;	CostCenter
;	DDLDCReqAction
;	GD_SAPNumber
;	labNextRole
;	labNextAction
;	DDLDCComment
;	btnSCClose
;	SCMessage
;	lbFMRelevantFor
;	lbOtherDependencies
;	HF_RelevantForSUS
;	HF_MandatoryAttachment
;	HF_MandatoryComment
;	HF_RelevantForCO
;	HF_RelevantForClusterRCO
;	txbNextRole
;	SR_Comments
;	btnBack2
;	btnSave
;	btnCloseFinal
;	SummaryMESSAGE_POPUP
; SOME HIDDEN FIELDS - CC_AM_SortKey, CC_AM_InterestIndic, CC_AM_CashManagementGroup, KNB1.XZVER, CC_CO_AuthorizationGroup
; TODO: THINK IF NEEDED IN REQUEST MODEL OR MAPPINGS....1277
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "CustomerSearchResultGrid", "Entity name should be 'CustomerSearchResultGrid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 2, "Should have '2' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_labOpInfoCustomer ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity labOpInfoCustomer is Label in frmMain
	with defaults
		label LABELS.labOpInfoVendor
		enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "labOpInfoCustomer", "Entity name should be 'labOpInfoCustomer' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_labOpInfoCountry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity labOpInfoCountry is Label in frmMain
	with defaults
		label LABELS.labOpInfoCountry
		enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "labOpInfoCountry", "Entity name should be 'labOpInfoCountry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_labOpInfoCC ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity labOpInfoCC is Label in frmMain
	with defaults
		label LABELS.labOpInfoCC
		enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "labOpInfoCC", "Entity name should be 'labOpInfoCC' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_labOpInfoSO ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity labOpInfoSO is Label in frmMain
	with defaults
		label LABELS.labOpInfoPO
		enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "labOpInfoSO", "Entity name should be 'labOpInfoSO' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_labOpInfoDC ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity labOpInfoDC is Label in frmMain
	with defaults
		label LABELS.labOPInfoDC
		enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "labOpInfoDC", "Entity name should be 'labOpInfoDC' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=5, ACTIONS=3, TRIGGERS=1
Entity GD_Adr_Name is TextBox in frmMain
	with defaults
		label LABELS.labName
		mandatory true
		max length 35
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE not in {CC,CC_CC} then
			this mandatory false
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE in {CC,CC_CC} then
			this mandatory true
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
		set value SUBSTRING(GD_Adr_Name.Value,20) in GD_Adr_Search
		set value GD_Adr_Name in B_GD_VB_AccountHolder
	with triggers 
		this on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name", "Entity name should be 'GD_Adr_Name' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Name2 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		; mandatory for ROLES.ENQ and in 5150 (the only Greece CoCD)
		REQUEST.COMPANY_CODE is 5150 and REQUEST.CURRENT_ROLE is ROLES.ENQ then 
			GD_Adr_Name4 mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name2", "Entity name should be 'GD_Adr_Name2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name3 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4
Entity GD_Adr_Name3 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		; mandatory for ROLES.ENQ and in 5150 (the only Greece CoCD)
		REQUEST.COMPANY_CODE is 5150 and REQUEST.CURRENT_ROLE is ROLES.ENQ then 
			GD_Adr_Name4 mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE not in {CC,CC_CC} then
			this mandatory false
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE in {CC,CC_CC} then
			this mandatory true
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name3", "Entity name should be 'GD_Adr_Name3' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name4 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=3
Entity GD_Adr_Name4 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE not in {CC,CC_CC} then
			this mandatory false
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE in {CC,CC_CC} then
			this mandatory true
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name4", "Entity name should be 'GD_Adr_Name4' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Search ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=2
Entity GD_Adr_Search is TextBox in frmMain
	with defaults
		label LABELS.Search
		max length 20
		; put here the first 20 characters of the name (which in creations comes from search screen)
		value GD_Adr_Name.Value
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			max length 5			
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Search", "Entity name should be 'GD_Adr_Search' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_Comment ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1
Entity GD_Com_Comment is TextBox in frmMain
	with defaults
		label LABELS.labComment
		max length 35
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_Comment", "Entity name should be 'GD_Com_Comment' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=3, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street is TextBox in frmMain
	with defaults
		label LABELS.labHouseNumber
		mandatory true
		max length 32
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street", "Entity name should be 'GD_Adr_Street' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street2 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then GD_Adr_Street2 not visible
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street2", "Entity name should be 'GD_Adr_Street2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street3 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street3 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then GD_Adr_Street3 not visible
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street3", "Entity name should be 'GD_Adr_Street3' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street4 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street4 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then GD_Adr_Street4 not visible
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street4", "Entity name should be 'GD_Adr_Street4' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street5 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Street5 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then GD_Adr_Street5 not visible
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street5", "Entity name should be 'GD_Adr_Street5' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_CountryGD ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=9
Entity GD_Adr_CountryGD is DropDownList in frmMain
	with defaults
		label LABELS.labCountry
		mandatory true
		enable false
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		value REQUEST.CUSTOMER_COUNTRY
; ---------------------------------------------------------------------------- 
;1) In customer creation from scratch MADAM has to check in table in sheet “Mandatory Region List” 
;	if it is mandatory and MADAM has to show in DDL the values according to the customer country.
;2) If customer country  belongs to YCT6 or YCT9 -> Region mandatory and the control generate postback
;3) if customer country belongs to YCT1 -> region mandatory /if region = 01 -> language = NL/If region = 02 OR 03 -> language = FR
;4) If customer country belongs to YCT6/YCT9: if region selected = ""2A"" -> Postal code begins with 20/
;    if region selected = ""2B"" -> Postal code begins with 20 else Postal code begins with code region
; TODO: I THINK THERE ARE MORE RULES
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_CountryGD", "Entity name should be 'GD_Adr_CountryGD' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 9, "Should have '9' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Region ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=11, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_Region is DropDownList in frmMain
	with defaults
		label LABELS.labRegion
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Regions with arguments {FlagActive : true, CountryCode : REQUEST.CUSTOMER_COUNTRY }
	with actions
		load data from DATASOURCE.MDMC_CreditControlGroups with arguments { CountryCode : REQUEST.COUNTRY, CompanyCode : REQUEST.COMPANY_CODE, RegionCode : GD_Adr_Region.Value} in KNKK_SBGRP
	with rules
		REQUEST.Region_IsMandatory is true and REQUEST.REQUEST_TYPE is CC then
			GD_Adr_Region mandatory true
		REQUEST.ACCOUNT_GROUP in {YCT1, YCT6, YCT9} then
			GD_Adr_Region mandatory true
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region.Value is 01 then
			set value NL in GD_Com_Language
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region.Value in {02, 03} then
			set value FR in GD_Com_Language
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} and GD_Adr_Region.Value is 2A then
			set value 20 in GD_Adr_PostalCode
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT6,YVT6,YCT9,YVT9} and REQUEST.Region_IsMandatory and REQUEST.TYPE is CC then
			this mandatory true
		REQUEST.COUNTRY is FR then
			this mandatory true
		REQUEST.COUNTRY is BE and GD_Adr_Region.Value is 01 then
			set value NL in GD_Com_LanguageCode
		REQUEST.COUNTRY is BE and GD_Adr_Region.Value is not 01 then
			set value FR in GD_Com_LanguageCode
		REQUEST.REQUEST_TYPE is CC and REQUEST.COUNTRY in {BE, LU} then
			this mandatory true
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Region", "Entity name should be 'GD_Adr_Region' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 11, "Should have '11' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_City ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=1, ACTIONS=1, TRIGGERS=1
Entity GD_Adr_City is TextBox in frmMain
	with defaults
		label LABELS.labCity
		mandatory true
		max length 35
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_City", "Entity name should be 'GD_Adr_City' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_City2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=3, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_City2 is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labDistrict
		max length 35
	with rules
		REQUEST.CUSTOMER_COUNTRY is GR and REQUEST.COUNTRY is GR then
			GD_Adr_City2 visible true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.COUNTRY is GR and REQUEST.CUSTOMER_COUNTRY is not GR and REQUEST.REQUEST_TYPE is not CM_BLK then
			GD_Adr_City2 visible true
			GD_Adr_City2 mandatory true
; ---------------------------------------------------------------------------- 
;	""25-07-2014(RG): 1)By default maxlength = 10
;	IF vendor country belongs to YVT1/YVT2 -> Maxlength = 4
;	IF vendor country belongs to YVT3/YVT5 -> Maxlength = 5
;	IF vendor country belongs to YVT4 -> Maxlength = 8
;	IF vendor country belongs to YVT6/YVT9 -> Maxlength = 5 and control generate postback
;	2) If vendor country belongs to YVT6/YVT9->region code = postal code firts digits (2)
;	3)VALIDATIONS
;	If vendor country belongs to YVT6/YVT9-> only numbers and fists digits must be equal with region
;	If vendor country Spain-> only numbers and must be < 53000
;	If vendor country Greece-> only numbers
;	If vendor country Italy-> only numbers
;	If vendor country Portugal-> format 9999-999
;	If vendor country Luxemburg-> only numbers
;	If vendor country Belgium-> only numbers and
;	region 01 -> must be >=1500 and <=3999 OR >=8000 and <=9999
;	region 02 -> must be >=1300 and <=1499 OR >=4000 and <=7999
;	region 03 -> must be >=1000 and <=1299""
; TODO: TERMINAR DE REVISAR TODAS LAS REGLAS EN CODIGO 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_City2", "Entity name should be 'GD_Adr_City2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_PostalCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=15, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_PostalCode is TextBox in frmMain
	with defaults
		label LABELS.labPostalCode
		mandatory true
		max length 10
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} then
			this enable false
		REQUEST.ACCOUNT_GROUP in {YCT1, YCT2} then
			max length 4
			validation ^[0-9]{4}$
		REQUEST.ACCOUNT_GROUP in {YCT3, YCT5, YCT7} then
			max length 5
			validation ^[0-9]{5}$
		REQUEST.ACCOUNT_GROUP is YCT4 then
			max length 8
			validation ^[0-9]{4}-[0-9]{3}$
		REQUEST.CUSTOMER_COUNTRY in {IT, GR} then
			max length 5
		REQUEST.CUSTOMER_COUNTRY is ES then
			max length 5
			validation ^[0-5]{1}[1-2]{1}[0-9]{3}$
		; post code must be >=1500 and <=3999 OR >=8000 and <=9999
		; the regular expression covers the ranges
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 01 then
			max length 4
			validation ^(1[5-9][0-9]{2}){1}|((2|3)[0-9]{3}){1}|((8|9)[0-9]{3})$
		; post code must be >=1300 and <=1499 OR >=4000 and <=7999
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 02 then
			max length 4
			validation ^(1[3-4][0-9]{2}){1}|([4-7][0-9]{3})$
		; post code must be >=1000 and <=1299
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 03 then
			max length 4
			validation ^(1[0-2][0-9]{2})$
		REQUEST.CUSTOMER_COUNTRY in {FR, GF, GP, MC, MQ, NC, PF, PM, RE, WF, YT} then
			max length 5
			validation ^[0-9]{5}$
			set value substring(GD_Adr_PostalCode,2) in GD_Adr_Region
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} then
			max length 5
			mandatory true 
		GD_Adr_CountryGD.Value is ES then
			tooltip MESSAGES.ERRSpanishPC5
		GD_Adr_CountryGD.Value is PT then
			tooltip MESSAGES.ERRPortuguesePCFormat
		GD_Adr_CountryGD.Value is IT then
			tooltip MESSAGES.ERRItalianPC5
		; SPAIN or ANDORRA
		; TODO : CONTINUE HERE - TEST THIS LINE ERROR WHY?
		REQUEST.CUSTOMER_COUNTRY in {ES,AD} and REQUEST.REQUEST_TYPE in {CC, CC_CC} and GD_Adr_PostalCode.Value.Length >= 2 then
			; load data from DATASOURCES.SelectAccountingClerkByPostCodeAndSalesArea with arguments {} in CC_CO_AccountingClerk
			load data from DATASOURCES.SelectAccountingClerkByPostCodeAndSalesArea in CC_CO_AccountingClerk
	with triggers
		this changes
; ---------------------------------------------------------------------------- 
;	1)If regional country = France -> maxlength = 10
;	2) IF vendor country belongs to (SAP country code FR GF GP MC MQ NC PF PM RE WF YT) and POBox is informed  -> POBoxPostalCode, POBox and POBox City mandatory
;	else if POBox empty or informed with """"."""" -> POBoxPostalCode, POBox and POBox City NOT mandatory
;	3) If vendor country belongs to YVT7 -> maxlength = 5
;	4) If vendor country belongs to (SAP country code FR GF GP MC MQ NC PF PM RE WF YT)  -> maxlength = 10 and mandatory by default false and field do postback""
;	TODO: REVISAR CODIGO
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_PostalCode", "Entity name should be 'GD_Adr_PostalCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 15, "Should have '15' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

	}
}