using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using BREadfruit.Exceptions;
using NUnit.Framework;
using BREadfruit.Helpers;
using BREadfruit.Conditions;
/* ************************************************************
 *                                                            *
 * AUTOGENERATED ON : 30/01/2015 18:35:30	
 *                                                            *
************************************************************* */
namespace BREadfruit.Tests.Autogenerated
{
	[TestFixture]
	public class CustomerEntities
	{
		[Test]
		public void TestEntity_rbSpiridon ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity rbSpiridon is RadioButton in frmSearch
	with defaults
		enabled false
		label ""Spiridon""
		value true				; means checked
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "rbSpiridon", "Entity name should be 'rbSpiridon' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_rbEPass ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity rbEPass is RadioButton in frmSearch
	with defaults
		enabled false
		label ""Epass""
		value false				; means unchecked
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "rbEPass", "Entity name should be 'rbEPass' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerName ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerName is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerName
		value   ''
	with actions
		hide btnCreateCustomer
		clear CustomerSearchResultGrid
		set hidden CustomerSearchResultGrid
	with rules
	with triggers
		TBCustomerName.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerName", "Entity name should be 'TBCustomerName' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerCity ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerCity is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerCity
		value  ''
	with actions
		hide btnCreateCustomer
		set hidden CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
	with triggers
		this	 changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerCity", "Entity name should be 'TBCustomerCity' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=3, RULES=2, TRIGGERS=1
Entity TBCustomerNumber is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerNumber
		value   ''
		min length 10
		max length 10
		validation ^[0-9]{10}$
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
		; show this message ""This partner is not managed by Madam. Please contact GSS master data team."" if starting with 0
		TBCustomerNumber.text starts with '0' then
			set value MESSAGES.ERRPartnerNotManaged in MESSAGE_POPUP
		TBCustomerNumber.text not starts with '0' then
			set value '' in MESSAGE_POPUP
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerNumber", "Entity name should be 'TBCustomerNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerIFA ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=3, RULES=2, TRIGGERS=1
Entity TBCustomerIFA is TextBox in frmSearch
	with defaults
		label LABELS.labCustomerIFA
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with rules
		TBCustomerIFA.Value is not empty then 
			DDLDCountry mandatory false
		else
			DDLDCountry mandatory true
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerIFA", "Entity name should be 'TBCustomerIFA' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLDCountry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=5, RULES=4, TRIGGERS=1
Entity DDLDCountry is DropDownList in frmSearch
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		label LABELS.labCountry
		value USER.COUNTRY		; preselect user country if there is data in SCD for this user
	with actions
		set value '' in MESSAGE_POPUP
		hide CustomerSearchResultGrid
		hide btnCreateCustomer
		load data from DATASOURCE.MDMC_Countries 
		clear CustomerSearchResultGrid
	with rules
		DDLCDCountry.Value in {FR,GF,GP,RE,MQ,YT,NC,PF,PM,WF,MC,TF} then label LABELS.labSIRET in TBVendorVAT
		DDLCDCountry.Value in {PT,ES} then label LABELS.labNIF in TBVendorVAT
		DDLCDCountry.Value is IT then label LABELS.labPartitaIVA in TBVendorVAT
		DDLCDCountry.Value not in {PT,ES,IT,FR,GF,GP,RE,MQ,YT,NC,PF,PM,WF,MC} then label LABELS.labVAT in TBVendorVAT
	with triggers
		this.Value changes 
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLDCountry", "Entity name should be 'DDLDCountry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 5, "Should have '5' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TBCustomerVAT ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=3, RULES=0, TRIGGERS=1
Entity TBCustomerVAT is TextBox in frmSearch
	with defaults
		value ''
		label LABELS.labCustomerVAT
	with actions
		hide btnCreateCustomer
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "TBCustomerVAT", "Entity name should be 'TBCustomerVAT' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDCountry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, ACTIONS=5, RULES=0, TRIGGERS=1
Entity DDLCDCountry is DropDownList in frmSearch
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labCountry
		value USER.COUNTRY		; preselect user country if there is data in SCD for this user
		load data from DATASOURCE.MDMC_ClusterCountries
		mandatory true
	with actions
		; load active companies for this country
		load data from DATASOURCE.MDMC_ClusterCompanies with arguments {CountryCode : this.Value} in DDLCDCompany
		; purge the data in this dropdownlist
		clear DDLCDSalesOrg
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDCountry", "Entity name should be 'DDLCDCountry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 5, "Should have '5' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDCompany ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7	, ACTIONS=4, RULES=0, TRIGGERS=1
Entity DDLCDCompany is DropDownList in frmSearch
	with defaults
		label LABELS.labCompany
		mandatory true
		data field DisplayName
		value field Code
		value USER.COST_LOCATION_UNIT			; another data constant
	with actions
		; load active companies for this country
		load data from DATASOURCE.MDMC_ClusterSalesOrganizations with arguments {CompanyCode: DDLCDCompany.Value} in DDLCDSalesOrg 
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDCompany", "Entity name should be 'DDLCDCompany' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 4, "Should have '4' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDSalesOrg ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, ACTIONS=4, RULES=1, TRIGGERS=1
Entity DDLCDSalesOrg is DropDownList in frmSearch
	with defaults
		label LABELS.labSalesOrg
		value ''
		mandatory true
		data field DisplayName
		value field Code
	with actions
		; load active companies for this country
		; this means the current ìmplementation needs to change a bit...
		load data from DATASOURCE.SelectDistributionChannels with arguments {countrycode : DDLCDCountry.Value, companycode :DDLCDCompany.Value, salesorgcode :DDLCDSalesOrg.Value} in DDLCDDistribChannel
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with rules
		DDLCDDistribChannel.Items.Count is true then
			DDLCDDistribChannel visible true
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDSalesOrg", "Entity name should be 'DDLCDSalesOrg' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 4, "Should have '4' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDDistribChannel ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, ACTIONS=3, RULES=2, TRIGGERS=1
Entity DDLCDDistribChannel is DropDownList in frmSearch
	with defaults
		label LABELS.labDistribChannel
		data field DisplayName
		value field Code
		visible false
	with actions
		hide CustomerSearchResultGrid
		clear CustomerSearchResultGrid
		hide btnCreateVendor
	with rules
		DDLCDDistribChannel.Items.Count > 0 then
			DDLCDDistribChannel visible true
		else
			DDLCDDistribChannel visible false
		DDLCDDistribChannel is visible and DDLCDivision is empty then
			DDLCDDistribChannel mandatory
	with triggers
		this.Value changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDDistribChannel", "Entity name should be 'DDLCDDistribChannel' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLCDivision ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, ACTIONS=0, RULES=2, TRIGGERS=0
Entity DDLCDivision is DropDownList in frmSearch
	with defaults
		visible false
		label LABELS.labDivision
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Divisions with arguments {ClusterCountryCode: DDLCDCountry.Value, ClusterCompanyCode : DDLCDCompany.Value, ClusterSalesOrganization : DDLCDSalesOrg.Value, FlagActive : true }
	with rules
		DDLCDivision.Items.Count > 0 then
			this visible true
		else
			this visible false
		DDLCDivision is visible and DDLCDivision is empty then
			DDLCDivision mandatory
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "DDLCDivision", "Entity name should be 'DDLCDivision' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnSearch ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=0, RULES=1, TRIGGERS=1
Entity btnSearch is Button in frmSearch
	with defaults
		label LABELS.btnSearch
	with rules
		; yes, teh function defines the last parameter as ClusterPOCode, not ClusterSOCode, so this is right
		DATASOURCE.IsUserInROLE with arguments { UserAccount : USER.USER_ACCOUNT, RoleCode : USER.CURRENT_ROLE, ClusterCountryCode : DDLCDCountry.Value, ClusterCompanyCode : DDLCDCompany.Value, ClusterPOCode : DDLCDSalesOrg.Value } is false then
			set value MESSAGES.ERRauthCCPO in MESSAGE_POPUP
		else
			TBCustomerNumber.text starts with '0' then
				set value MESSAGES.ERRPartnerNotManaged in MESSAGE_POPUP
			DDLCDCountry is empty then
				set value MESSAGES.ERRfieldVCountry in MESSAGE_POPUP
			DDLCDivision is visible and DDLCDivision is empty then
				; show this message : Fill the field of Division Country
				set value MESSAGES.ERRfieldDivisionCountry in MESSAGE_POPUP
			TBCustomerNumber.Length is not 10 then
				set value MESSAGES.ERRfieldCNumer_10 in MESSAGE_POPUP
			DDLDCountry is empty and TBCustomerIFA is empty then
				set value MESSAGES.ERRfieldVCountry in MESSAGE_POPUP
			TBCustomerVAT is not empty and DDLDCountry is empty then
				set value MESSAGES.ERRfieldCCountry in MESSAGE_POPUP
			TBCustomerVAT is empty and TBCustomerVAT is empty and TBCustomerName is empty and TBCustomerCity is empty and TBCustomerIFA is empty then
				set value MESSAGES.ERRKeyTaxIFACountryCity in MESSAGE_POPUP
			TBCustomerVAT is empty and TBCustomerVAT is empty and DDLDCountry is empty then
				set value MESSAGES.ERRfieldCCountry in MESSAGE_POPUP
			; TBCustomerName is empty and TBCustomerCity is not empty and TBCustomerName is empty and TBCustomerIFA is empty and DDLDCountry is empty and TBCustomerVAT is empty then
			; 	set value MESSAGES.VALIDATIONS.SEARCH.FILL01 in MESSAGE_POPUP
			DDLCDCountry is empty or DDLCDCompany is empty or DDLCDSalesOrg is empty then
				set value MESSAGES.ERRSOfieldCCS in MESSAGE_POPUP
			; TODO: VERIFY THIS WITH SEB
			MESSAGE_POPUP is empty then
				load data from WEBSERVICE.CUSTOMER_SEARCH_SERVICE with arguments {CustomerName:TBCustomerName.Value, CustomerCity:TBCustomerCity, CustomerNumber:TBCustomerNumber.Value, CustomerCountry:DDLVDCountry.Value,TaxCode1:TBCustomerVAT.Value,TaxCode4:TBCustomerIFA.Value, Country:DDLDCountry.Value, CompanyCode:DDLCDCompany.Value, SalesOrganization:DDLCDSalesOrg.Value, Division:DDLCDivision } in CustomerSearchResultGrid
	with triggers
		this on click	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "btnSearch", "Entity name should be 'btnSearch' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnCreateCustomer ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=0, RULES=0, TRIGGERS=1
Entity btnCreateCustomer is Button in frmSearch
	with defaults
		label LABELS.btnCreateCustomer
	with actions
		frmMain visible true
		frmSearch visible false
	with rules
		; how to specify all that happens server side here?
		; shall be express something like change form?
	with triggers
		this click
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "btnCreateCustomer", "Entity name should be 'btnCreateCustomer' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CustomerSearchResultGrid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=27, RULES=1, TRIGGERS=1
Entity CustomerSearchResultGrid is Grid in frmSearch
	with defaults
		visible false
		define column Customer with arguments {  DataField: Customer, Header : LABELS.lblCustomer, Visible : true }
		define column Vendor with arguments {  DataField: Vendor, Header : LABELS.lblVendor, Visible : true }  
		define column name1 with arguments {  DataField: name1, Header : LABELS.lblName, Visible : true }  
		define column name3 with arguments {  DataField: name3, Header : LABELS.lblComment, Visible : true }  
		define column Street with arguments {  DataField: Street, Header : LABELS.lblStreet, Visible : true }  
		define column City with arguments {  DataField: City, Header : LABELS.lblCity, Visible : true }  
		define column Country with arguments {  DataField: Country, Header : LABELS.lblCountry, Visible : true }
		define column Taxcode with arguments {  DataField: Taxcode, Header : LABELS.lblLocal_Tax_Code, Visible : true }  
		define column VAT with arguments {  DataField: VAT, Header : LABELS.lblEU_Registration_Nr, Visible : true }  
		define column NaturalPerson with arguments {  DataField: NaturalPerson, Header : LABELS.labGD_Ctr_IsNaturalPerson, Visible : true }
		define column Risk with arguments {  DataField: Risk, Header : LABELS.lblRiskClass, Visible : true }
		define column KNA1_SPERR with arguments {  DataField: KNA1_SPERR, Header : LABELS.lblCentralPostingBlock , Visible : true }
		define column KNA1_AUFSD with arguments {  DataField: KNA1_AUFSD, Header : LABELS.lblCentralOrderBlock   , Visible : true }
		define column KNA1_LIFSD with arguments {  DataField: KNA1_LIFSD, Header : LABELS.lblCentralDelBlock, Visible : true }  
		define column KNA1_FAKSD with arguments {  DataField: KNA1_FAKSD, Header : LABELS.lblCentralBillingBlock, Visible : true } 
		define column Company with arguments {  DataField: Company, Header : LABELS.Company   , Visible : true }
		define column KNB1_FRGRP with arguments {  DataField: KNB1_FRGRP, Header : LABELS.lblBusinessPartnerClass  , Visible : true }
		define column KNB1_ZTERM with arguments {  DataField: KNB1_ZTERM, Header : LABELS.lblPaymentTerms  , Visible : true }
		define column KNB1_SPERR with arguments {  DataField: KNB1_SPERR, Header : LABELS.lblPosting_Block  	, Visible : true }
		define column SO with arguments {  DataField: SO, Header : LABELS.lblSalesOrganiz, Visible : true }
		define column DistChannel with arguments {  DataField: DistChannel, Header : LABELS.lblChannel , Visible : true }
		define column KNVV_ZTERM with arguments {  DataField: KNVV_ZTERM, Header : LABELS.lblPaymentTermsSO  , Visible : true }
		define column KNVV_AUFSD with arguments {  DataField: KNVV_AUFSD, Header : LABELS.Sales_Org_Order_Block  , Visible : true }
		define column KNVV_LIFSD with arguments {  DataField: KNVV_LIFSD, Header : LABELS.lblSales_Org_Delivery_Block , Visible : true } 
		define column KNVV_FAKSD with arguments {  DataField: KNVV_FAKSD, Header : LABELS.lblSales_Org_Billing_Block  , Visible : true }
		; button columns
		define column CreateButton with arguments { Header : LABELS.lblAction, Text: LABELS.lblCreate, Visible: false}
		define column ModifyButton with arguments { Header : LABELS.lblAction, Text: LABELS.lblModify, Visible: false}
		define column BlockButton with arguments { Header : LABELS.lblAction, Text: LABELS.lblBlock, Visible: false}
	with rules
		CustomerSearchResultGrid.Items.Count is 0 then
			btnCreateCustomer visible true
		else
			btnCreateCustomer visible false
		; these rules have to be applied row by row of course
		Company.Value is empty then
			CreateButton visible true
			set value LABELS.lblToBeCreated in Company
		PO.Value is empty then
			CreateButton visible true
			set value LABELS.lblToBeCreated in PO
		Company.Value is not empty and PO.Value is not empty then
			ModifyButton visible true
			BlockButton visible true
	with triggers
		this loads
; ----------------------------------------------------------------------------	
;     END OF SEARCH FORM DEFINITION
; ----------------------------------------------------------------------------	
; ----------------------------------------------------------------------------	
; BEGIN MAIN FORM CONTROL DEFINITION
; ----------------------------------------------------------------------------	
; ----------------------------------------------------------------------------
;  -- LIST OF ALL ENTITIES FOUND in MDMC main FORM
; ----------------------------------------------------------------------------
; TODO: PENDING STUFF LIKE THE COMPOSITE CONTROLS-... FOR EXAMPLE CONTACT PERSONS ETC.....
;		AND TELEPHONES, EMAIL, ETC
;	labOpInfoCustomer
;	labOpInfoCountry
;	labOpInfoCC
;	labOpInfoSO
;	labOpInfoDC
;	GD_Adr_Name
;	GD_Adr_Name2
;	GD_Adr_Name3
;	GD_Adr_Name4
;	GD_Adr_Search
;	GD_Com_Comment
;	GD_Adr_Street
;	GD_Adr_Street2
;	GD_Adr_Street3
;	GD_Adr_Street4
;	GD_Adr_Street5
;	GD_Adr_CountryGD
;	GD_Adr_Region
;	GD_Adr_City
;	GD_Adr_City2
;	GD_Adr_PostalCode
;	GD_Adr_POBox
;	GD_Adr_POBoxPostalCode
;	GD_Adr_POBoxLoc
;	GD_Com_LanguageCode
;	GD_Com_Telebox
;	GD_Com_DataLine
;	GD_Ctr_CustomerNumber
;	GD_Ctr_Industry
;	GD_Ctr_UnsubscribeCMD
;	GD_Ctr_GFORM
;	GD_Ctr_PIVA
;	GD_Ctr_CF
;	GD_Ctr_VendorNumber
;	GD_Ctr_IFANumber
;	GD_Ctr_TaxCode1
;	GD_Ctr_TaxCode2
;	GD_Ctr_VATRegistrationNumber
;	labGD_MainlyMilitary
;	labGD_MainlyCivilian
;	GD_Nuclear
;	labGD_FreeZone
;	labGD_Embassy
;	GD_Nat_NaturalPerson
;	GD_Nat_BirthDate
;	GD_Nat_PlaceOfBirth
;	GD_Nat_Profession
;	GD_Nat_Sex
;	CC_CO_ReconAccount
;	CC_PT_PaymentTerms
;	CC_PT_PaymentMethods
;	CC_PT_ClearingWithCustomer
;	CC_PT_IndividualPayment
;	CC_CO_AccountingClerk
;	CC_DD_DunningProcedure
;	CC_DD_DunningArea
;	CC_AR_PledgeIndicator
;	KNVV_BZIRK
;	SO_CustomerGroup
;	SO_SalesOffice
;	KNVV_EIKTO
;	KNVV_VKGRP
;	SO_SalesOrderCurrency
;	KNVV_KONDA
;	KNVV_PLTYP
;	SO_CustPricingProc
;	SO_CustomerStatsGroup
;	SO_CustomerShippingConditions
;	KNVV_VWERK
;	KNVV_AUTLF
;	KNVV_ANTLF
;	KNVV_LPRIO
;	KNVV_KZTLF
;	KNVV_PRFRE
;	SO_Incoterms
;	SO_IncotermsPart2
;	SO_TermsOfPaymentKey
;	KNVV_KTGRD
;	SO_TaxClassification
;	KNKK_SBGRP
;	KNVV_KVGR1
;	KNVV_KVGR2
;	KNVV_KVGR3
;	KNVV_KVGR4
;	KNVV_KVGR5
;	KNKK_KNKLI
;	KNKK_KLIMK
;	KNKK_CTLPC
;	KNKK_DTREV
;	KNKK_NXTRV
;	KNKK_KRAUS
;	KNKK_DBRTG
;	KNKK_REVDB
;	KNKK_DBEKR
;	btnBlockAll
;	btnUnblockAll
;	BLK_GD_Ctr_UnsubscribeCMD
;	labCentralPostingBlock
;	BLK_CentralPostingBlock
;	labPostBlockingForCompanyCode
;	BLK_PostingBlockForCC
;	BLK_CentralSalesOrderBlock
;	BLK_OrdersBlockAtSalesArea
;	BLK_CentralDeliveriesBlock
;	BLK_DeliveriesBlockAtSalesArea
;	BLK_CentralBillingBlock
;	BLK_BillingBlockAtSalesArea
;	labCentralSalesSupportBlock
;	BLK_CentralSalesSupportBlock
;	labCentralSalesSupportBlockAtThisSalesArea
;	BLK_CentralSalesSupportBlockAtSalesArea
;	labCentralDelMasterRecord
;	BLK_CentralDeletionFlagMasterRecord
;	labDelFlagMasterCompanyCode
;	BLK_DeletionFlagMasterRecordCC
;	labDelFlagAtThisSalesArea
;	BLK_DeletionFlagMasterRecordSA
;	labCentralDelBlockMaster
;	BLK_CentralDeletionBlockMasterRecord
;	labDelBlockMasterCompany
;	BLK_DeletionBlockMasterRecordCC
;	TS_IsUrgentRequest
;	CostCenter
;	DDLDCReqAction
;	GD_SAPNumber
;	labNextRole
;	labNextAction
;	DDLDCComment
;	btnSubmit
;	btnClose
;	MADAM_MESSAGE_POPUP
;	GD_Ctr_RiskClassification
;	GD_Adr_Country
;	GD_Ctr_CustomerClassification
;	CC_AM_BPClassification
;	GD_Damex
;	GD_Ctr_IsNaturalPerson
;	labGD_DamexNote
;	ATTACHMENT
;	AttachHistory
;	SAP_Message
;	CostCenter
;	DDLDCReqAction
;	GD_SAPNumber
;	labNextRole
;	labNextAction
;	DDLDCComment
;	btnSCClose
;	SCMessage
;	lbFMRelevantFor
;	lbOtherDependencies
;	HF_RelevantForSUS
;	HF_MandatoryAttachment
;	HF_MandatoryComment
;	HF_RelevantForCO
;	HF_RelevantForClusterRCO
;	txbNextRole
;	SR_Comments
;	btnBack2
;	btnSave
;	btnCloseFinal
;	SummaryMESSAGE_POPUP
; TODO: SOME HIDDEN FIELDS - CC_AM_SortKey, CC_AM_InterestIndic, CC_AM_CashManagementGroup, KNB1.XZVER, CC_CO_AuthorizationGroup
; TODO: THINK IF NEEDED IN REQUEST MODEL OR MAPPINGS....1277
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmSearch", "Entity form should be 'frmSearch' but is " + e.Form );
			Assert.That ( e.Name == "CustomerSearchResultGrid", "Entity name should be 'CustomerSearchResultGrid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 27, "Should have '27' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_RiskClassification ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=4, ACTIONS=0, TRIGGERS=2
Entity GD_Ctr_RiskClassification is DropDownList in frmMain
	with defaults
		enabled true
		visible true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_RiskClassifications
		label LABELS.labGD_Ctr_RiskClassification
		value 00
		mandatory true
	with rules
		GD_Ctr_RiskClassification.Value is empty then
			GD_Ctr_RiskClassification enabled true
		CC_AM_BPClassification is enabled then
			GD_Ctr_RiskClassification enabled true
		REQUEST.CURRENT_ROLE in {ROLES.ENQ, ROLES.RCO, ROLES.CLERK} then 
			this enabled true
		else
			this enabled false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE is ROLES.SUS or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_RiskClassification", "Entity name should be 'GD_Ctr_RiskClassification' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_Adr_Country is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		visible true
		enabled false					; this control is always disabled
		value REQUEST.VENDOR_COUNTRY
		load data from DATASOURCE.MDMC_Countries
		mandatory true
		label LABELS.labGD_Adr_Country
	with rules
		; TODO: THESE RULES HAVE TO GO SOMEWHERE ELSE
		; GD_Adr_Country.Value is ES and GD_Ctr_VendorClassification is not G and GD_Ctr_TaxCode1.Value starts with {P,Q,S,U} and REQUEST.CURRENT_ROLE is ROLES.ENQ  and REQUEST.REQUEST_TYPE is CC then
		; 	set value G in GD_Ctr_VendorClassification
		; 
		; GD_Adr_Country.Value is ES and GD_Ctr_VendorClassification is not G and GD_Ctr_TaxCode1.Value starts with {P,Q,S,U} and REQUEST.CURRENT_ROLE is ROLES.ENQ  and REQUEST.REQUEST_TYPE is not CC and GD_Ctr_CustomerClassification.OldDisplayValue is not empty then
		; 	set value G in GD_Ctr_VendorClassification
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Country", "Entity name should be 'GD_Adr_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_CustomerClassification ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=4, ACTIONS=1, TRIGGERS=2
Entity GD_Ctr_CustomerClassification is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labGD_Ctr_VendorClassification
		mandatory true
		visible true
		enabled true
		value NG
		; values G  and NG
		load data from DATASOURCE.VENDOR_CLASSIFICATIONS
	with rules
		REQUEST.CUSTOMER_COUNTRY is ES and GD_Ctr_TaxCode1.Text starts with {P,Q,S} then set value G in GD_Ctr_CustomerClassification
		REQUEST.CUSTOMER_COUNTRY is ES and GD_Ctr_TaxCode1.Text starts with G then set value NG in GD_Ctr_CustomerClassification
		; TODO: RULE FOR FR - LEGAL FORM - REVIEW THIS
		; For customer country France the value is set due to legal form selection, see sheet ""Legal form(France)""  meaning what??????
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS,ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
		REQUEST.CURRENT_ROLE is ROLES.RCO and REQUEST.COUNTRY in {IT, GR} then this enabled 
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_CustomerClassification", "Entity name should be 'GD_Ctr_CustomerClassification' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_AM_BPClassification ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=5, ACTIONS=1, TRIGGERS=2
Entity CC_AM_BPClassification is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_ReleaseGroups
		visible true
		enabled true
		value NORM
		mandatory true
		label LABELS.labCC_AM_BPClassification
	with rules
		REQUEST.COUNTRY in {BE,IT,PT} then			; NOTE: not in fieldmapping
			this mandatory false
		REQUEST.REQUEST_TYPE is CM_BLK then			; NOTE: not in fieldmapping
			this mandatory false	
		REQUEST.CURRENT_ROLE in {ROLES.ENQ, ROLES.RCO, ROLES.CLERK} then 
			this enabled true
		else
			this enable false
		CC_AM_BPClassification.Value in {BPHR, BPMR} then ATTACHMENT mandatory 
		; TODO: CHECK THIS WITH SEB 
		REQUEST.CC_AM_BPClassification is not empty then
			set value REQUEST.CC_AM_BPClassification in CC_AM_BPClassification
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with actions
		; ATTACHMENT mandatory  false
		; _COMMENT_ mandatory  false
	with triggers 
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_AM_BPClassification", "Entity name should be 'CC_AM_BPClassification' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=4, ACTIONS=3, TRIGGERS=2
Entity GD_Adr_Name is TextBox in frmMain
	with defaults
		label LABELS.labName
		mandatory true
		max length 35
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then				; NOTE: not in fieldmapping
			max length 28
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE not in {CC,CC_CC} then		; NOTE: not in fieldmapping
			this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
		set value SUBSTRING(GD_Adr_Name.Value,20) in GD_Adr_Search
		set value GD_Adr_Name.Value in B_GD_VB_AccountHolder
	with triggers 
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name", "Entity name should be 'GD_Adr_Name' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 3, "Should have '3' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=3, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_Name2 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name2", "Entity name should be 'GD_Adr_Name2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name3 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_Name3 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT7,YVT7} then
			this mandatory true
		REQUEST.CURRENT_ROLE is ROLES.CLERK then
			this mandatory true
		; NOTE: not in fieldmapping
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE in {CC,CC_CC} then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name3", "Entity name should be 'GD_Adr_Name3' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Name4 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, TRIGGERS=1
Entity GD_Adr_Name4 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT7,YVT7} then
			this mandatory true
		REQUEST.CURRENT_ROLE is ROLES.CLERK then
			this mandatory true
			; NOTE: not in fieldmapping
		REQUEST.COUNTRY is GR and REQUEST.REQUEST_TYPE in {CC,CC_CC} then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Name4", "Entity name should be 'GD_Adr_Name4' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Search ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=2, TRIGGERS=1
Entity GD_Adr_Search is TextBox in frmMain
	with defaults
		label LABELS.Search
		max length 20
		; put here the first 20 characters of the name (which in creations comes from search screen)
		value GD_Adr_Name.Value
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			max length 5			
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Search", "Entity name should be 'GD_Adr_Search' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_Comment ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, TRIGGERS=1
Entity GD_Com_Comment is TextBox in frmMain
	with defaults
		label LABELS.labComment
		max length 35
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_Comment", "Entity name should be 'GD_Com_Comment' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=3, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_Street is TextBox in frmMain
	with defaults
		label LABELS.labHouseNumber
		mandatory true
		max length 32
	with rules
		; NOTE: not in fieldmapping
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		; NOTE: not in fieldmapping
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street", "Entity name should be 'GD_Adr_Street' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_Street2 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street2", "Entity name should be 'GD_Adr_Street2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street3 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_Street3 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street3", "Entity name should be 'GD_Adr_Street3' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street4 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=4, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_Street4 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.ACCOUNT_GROUP in {YCT1,YCT2} then
			max length 32
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 28
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street4", "Entity name should be 'GD_Adr_Street4' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Street5 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_Street5 is TextBox in frmMain
	with defaults
		max length 32
	with rules
		REQUEST.COUNTRY is FR then 
			this not visible
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Street5", "Entity name should be 'GD_Adr_Street5' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_CountryGD ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8
Entity GD_Adr_CountryGD is DropDownList in frmMain
	with defaults
		label LABELS.labCountry
		mandatory true
		enable false
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		value REQUEST.CUSTOMER_COUNTRY
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_CountryGD", "Entity name should be 'GD_Adr_CountryGD' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_Region ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=10, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_Region is DropDownList in frmMain
	with defaults
		label LABELS.labRegion
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Regions with arguments {FlagActive : true, CountryCode : REQUEST.CUSTOMER_COUNTRY }
	with actions
		load data from DATASOURCE.MDMC_CreditControlGroups with arguments { CountryCode : REQUEST.COUNTRY, CompanyCode : REQUEST.COMPANY_CODE, RegionCode : GD_Adr_Region.Value} in KNKK_SBGRP
	with rules
		REQUEST.Region_IsMandatory is true and REQUEST.REQUEST_TYPE is CC then
			GD_Adr_Region mandatory true
		; NOTE: yct1 and yct2 in code, not in fieldmapping
		REQUEST.ACCOUNT_GROUP in {YCT1, YCT2, YCT6, YCT9} and REQUEST.REQUEST_TYPE is CC then
			GD_Adr_Region mandatory true
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region.Value is 01 then
			set value NL in GD_Com_Language
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region.Value in {02, 03} then
			set value FR in GD_Com_Language
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} and GD_Adr_Region.Value is 2A then
			set value 20 in GD_Adr_PostalCode
		REQUEST.ACCOUNT_GROUP in {YCT6,YVT6,YCT9,YVT9} and REQUEST.Region_IsMandatory and REQUEST.TYPE is CC then
			this mandatory true
		REQUEST.COUNTRY is FR then
			this mandatory true
		REQUEST.COUNTRY is BE and GD_Adr_Region.Value is 01 then
			set value NL in GD_Com_LanguageCode
		REQUEST.COUNTRY is BE and GD_Adr_Region.Value is not 01 then
			set value FR in GD_Com_LanguageCode
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_Region", "Entity name should be 'GD_Adr_Region' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 10, "Should have '10' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_City ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=1, ACTIONS=1, TRIGGERS=2
Entity GD_Adr_City is TextBox in frmMain
	with defaults
		label LABELS.labCity
		mandatory true
		max length 35
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT7,YVT7} then
			this mandatory true
		REQUEST.CURRENT_ROLE is ROLES.CLERK then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_City", "Entity name should be 'GD_Adr_City' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_City2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=3, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_City2 is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labDistrict
		max length 35
	with rules
		REQUEST.CUSTOMER_COUNTRY is GR or REQUEST.COUNTRY is GR then
			GD_Adr_City2 visible true
		; NOTE: not in fieldmapping
		REQUEST.COUNTRY is GR and REQUEST.CUSTOMER_COUNTRY is not GR and REQUEST.REQUEST_TYPE is not CM_BLK then
			GD_Adr_City2 visible true
			GD_Adr_City2 mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_City2", "Entity name should be 'GD_Adr_City2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_PostalCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=15, ACTIONS=0, TRIGGERS=2
Entity GD_Adr_PostalCode is TextBox in frmMain
	with defaults
		label LABELS.labPostalCode
		mandatory true
		max length 10
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT1, YCT2} then
			max length 4
			validation ^[0-9]{4}$
		REQUEST.ACCOUNT_GROUP in {YCT3, YCT5, YCT7} then
			max length 5
			validation ^[0-9]{5}$
		REQUEST.ACCOUNT_GROUP is YCT4 then
			max length 8
			validation ^[0-9]{4}-[0-9]{3}$
		REQUEST.CUSTOMER_COUNTRY in {IT, GR} then
			max length 5
		REQUEST.CUSTOMER_COUNTRY is ES then
			max length 5
			validation ^[0-5]{1}[1-2]{1}[0-9]{3}$
		; post code must be >=1500 and <=3999 OR >=8000 and <=9999
		; the regular expression covers the ranges
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 01 then
			max length 4
			validation ^(1[5-9][0-9]{2}){1}|((2|3)[0-9]{3}){1}|((8|9)[0-9]{3})$
		; post code must be >=1300 and <=1499 OR >=4000 and <=7999
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 02 then
			max length 4
			validation ^(1[3-4][0-9]{2}){1}|([4-7][0-9]{3})$
		; post code must be >=1000 and <=1299
		REQUEST.CUSTOMER_COUNTRY is BE and GD_Adr_Region is 03 then
			max length 4
			validation ^(1[0-2][0-9]{2})$
		REQUEST.CUSTOMER_COUNTRY in {FR, GF, GP, MC, MQ, NC, PF, PM, RE, WF, YT} then
			max length 5
			validation ^[0-9]{5}$
			set value substring(GD_Adr_PostalCode,2) in GD_Adr_Region
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} then
			max length 5
			mandatory true 
		GD_Adr_CountryGD.Value is ES then
			tooltip MESSAGES.ERRSpanishPC5
		GD_Adr_CountryGD.Value is PT then
			tooltip MESSAGES.ERRPortuguesePCFormat
		GD_Adr_CountryGD.Value is IT then
			tooltip MESSAGES.ERRItalianPC5
		REQUEST.CUSTOMER_COUNTRY in {ES,AD} and REQUEST.REQUEST_TYPE in {CC, CC_CC} and GD_Adr_PostalCode.Value.Length >= 2 then
			load data from DATASOURCES.SelectAccountingClerkByPostCodeAndSalesArea in CC_CO_AccountingClerk
		; TODO: PUT THIS VALIDATION IN BTNSAVE 
		; REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
		; make sure then that first two digits are same as value in Region combo	
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_PostalCode", "Entity name should be 'GD_Adr_PostalCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 15, "Should have '15' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_POBox ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=8, ACTIONS=0, TRIGGERS=2
Entity GD_Adr_POBox is TextBox in frmMain
	with defaults
		label LABELS.labPOBox
		max length 10
	with rules
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is not empty then
			GD_Adr_POBoxPostalCode mandatory true
			GD_Adr_POBoxLoc mandatory true
			GD_Adr_POBox mandatory true
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is empty or GD_Adr_POBox.Value is . then
			GD_Adr_POBoxPostalCode mandatory false
			GD_Adr_POBoxLoc mandatory false
			GD_Adr_POBox mandatory false
		REQUEST.ACCOUNT_GROUP in {YVT7,YCT7} then
			max length 5
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc.Value is not empty then
			this mandatory true
		REQUEST.COUNTRY is FR then 
			max length 10
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxPostalCode is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_POBox", "Entity name should be 'GD_Adr_POBox' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 8, "Should have '8' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_POBoxPostalCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=8, ACTIONS=0, TRIGGERS=1
Entity GD_Adr_POBoxPostalCode is TextBox in frmMain
	with defaults
		label LABELS.labBoxPostalCode
		max length 10
	with rules
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is not empty then
			GD_Adr_POBoxPostalCode mandatory true
			GD_Adr_POBoxLoc mandatory true
			GD_Adr_POBox mandatory true
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is empty or GD_Adr_POBox.Value is . then
			GD_Adr_POBoxPostalCode mandatory false
			GD_Adr_POBoxLoc mandatory false
			GD_Adr_POBox mandatory false
		REQUEST.ACCOUNT_GROUP in {YVT7,YCT7} then
			max length 5
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		; NOTE: not in FM
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxPostalCode is not empty and GD_Adr_POBox is empty then
			set value . in GD_Adr_POBox
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc.Value is not empty then
			this mandatory true
			max length 5
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9} and GD_Adr_POBoxLoc.Value is not empty then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_POBoxPostalCode", "Entity name should be 'GD_Adr_POBoxPostalCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 8, "Should have '8' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Adr_POBoxLoc ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=5, TRIGGERS=1
Entity GD_Adr_POBoxLoc is TextBox in frmMain
	; TODO: SEE THIS IN ACTION BETTER THAN THIS MESS OF RULES
	with defaults
		label LABELS.labPoBoxLoc
		max length 100
	with rules
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox is not empty then
			; GD_Adr_POBoxPostalCode mandatory true
			GD_Adr_POBoxLoc mandatory true
			; GD_Adr_POBox mandatory true
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox.Value in {'',.} and GD_Adr_POBoxPostalCode is not empty then
			; GD_Adr_POBoxPostalCode mandatory false
			GD_Adr_POBoxLoc mandatory false
			; GD_Adr_POBox mandatory false
		; TODO: MAKES NOT MUCH SENSE DOES IT?
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} and GD_Adr_POBox.Value in {'',.} and GD_Adr_POBoxLoc is not empty then
			; GD_Adr_POBoxPostalCode mandatory false
			GD_Adr_POBoxLoc mandatory false
			; GD_Adr_POBox mandatory false
		REQUEST.COUNTRY is FR then	
			max length 40
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Adr_POBoxLoc", "Entity name should be 'GD_Adr_POBoxLoc' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_LanguageCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=5, ACTIONS=0, TRIGGERS=1
Entity GD_Com_LanguageCode is DropDownList in frmMain
	with defaults
		label LABELS.labLanguages
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Languages with arguments {FlagActive : true}	
		value EN		; default is English
	with rules
		REQUEST.CUSTOMER_COUNTRY in {FR,GF,GP,MC,MQ,NC,PF,PM,RE,WF,YT} then
			set value FR in GD_Com_LanguageCode
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region is 01 then
			set value NL in GD_Com_LanguageCode
		REQUEST.ACCOUNT_GROUP is YCT1 and GD_Adr_Region in {02, 03} then
			set value FR in GD_Com_LanguageCode
		; this should come from the MODEL (from the MDMC_Countries table) where ""country configuration"" is set
		REQUEST.DefaultLanguage is not empty then
			set value REQUEST.DefaultLanguage in GD_Com_LanguageCode
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_LanguageCode", "Entity name should be 'GD_Com_LanguageCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_Telebox ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=2, ACTIONS=0, TRIGGERS=1
Entity GD_Com_Telebox is DropDownList in frmMain
	with defaults
		label LABELS.labTelebox
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Telebox with arguments {FlagActive : true, AccountGroup : REQUEST.ACCOUNT_GROUP}
		mandatory true
		value PRT
	with rules
		REQUEST.REQUEST_TYPE is CC then
			set value PRT in GD_Com_Telebox
			this enable false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_Telebox", "Entity name should be 'GD_Com_Telebox' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_DataLine ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=1
Entity GD_Com_DataLine is TextBox in frmMain
	with defaults
		label LABELS.labDataLine
		max length 14
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_DataLine", "Entity name should be 'GD_Com_DataLine' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=0, ACTIONS=1, TRIGGERS=1
Entity GD_VT_Country is DropDownList in GD_VT_Grid
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		value REQUEST.CUSTOMER_COUNTRY
		mandatory true
	with actions
		load data from DATASOURCE.MDMC_CountryTelephonePrefixes with arguments {Code : GD_VT_Country.Value } in GD_VT_CountryCode
	with triggers
		this changes
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_Country", "Entity name should be 'GD_VT_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_CountryCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VT_CountryCode is TextBox in GD_VT_Grid
	with defaults
		label LABELS.labGD_VT_CountryCode
		enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_CountryCode", "Entity name should be 'GD_VT_CountryCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_Number ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VT_Number is TextBox in GD_VT_Grid
	with defaults
		max length 30
		label LABELS.labGD_VT_Number
		mandatory true
		; seems enough to allow things like +(34) 123-4567
		validation ^[0-9\-\.()\+\s]+
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_Number", "Entity name should be 'GD_VT_Number' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_Extension ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VT_Extension is TextBox in GD_VT_Grid
	with defaults
		max length 10
		label LABELS.lablabGD_VT_Extension
		; should we include a validation?
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_Extension", "Entity name should be 'GD_VT_Extension' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_Notes ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VT_Notes is TextBox in GD_VT_Grid
	with defaults
		max length 50
		label LABELS.labGD_VT_Notes
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_Notes", "Entity name should be 'GD_VT_Notes' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VT_Default is CheckBox in GD_VT_Grid
	with defaults
		; by defaults appears checked and disabled
		value true
		label LABELS.labP_GD_VT_Default
		enabled false
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_Default", "Entity name should be 'GD_VT_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_ConsNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VT_ConsNumber is TextBox in GD_VT_Grid
	with defaults
		visible false
		label LABELS.labGD_VT_ConsNumber
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_ConsNumber", "Entity name should be 'GD_VT_ConsNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VT_btnInsert is Button in GD_VT_Grid
	with defaults
		label LABELS.btnInsert
; ---------------------------------------------------------------------------- 
; TODO: CHECK WITH SEB, do we need to indicate some data loading somehow?
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VT_Grid", "Entity form should be 'GD_VT_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_btnInsert", "Entity name should be 'GD_VT_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VT_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=9, RULES=1, ACTIONS=0, TRIGGERS=4
Entity GD_VT_Grid is Grid in frmMain
	with defaults
		; TODO: how to define or set the controls inside? the row definition?
		define column GRID_GD_VT_Country		with arguments {ControlID : GD_VT_Country, DataField : GD_VT_Country, Header : LABELS.labCountry,  Visible : true}
		define column GRID_GD_VT_CountryCode	with arguments {ControlID : GD_VT_CountryCode,		DataField : GD_VT_CountryCode, Header : LABELS.labPrefix, Enabled : false, Visible : true}
		define column GRID_GD_VT_Number		with arguments {	ControlID : GD_VT_Number,	DataField : GD_VT_Number, Header : LABELS.labNumber, Visible : true}
		define column GRID_GD_VT_Extension	with arguments {	ControlID : GD_VT_Extension,	DataField : GD_VT_Extension, Header : LABELS.labExtension, Visible : true}
		define column GRID_GD_VT_Notes		with arguments {	ControlID : GD_VT_Notes,	DataField : GD_VT_Notes, Header : LABELS.labNotes, Visible : true}
		define column GRID_GD_VT_Default		with arguments {ControlID : GD_VT_Default,		DataField : GD_VT_Default, Header : LABELS.labDefault, Visible : true}
		define column GRID_GD_VT_ConsNumber	with arguments {	ControlID : GD_VT_ConsNumber,	DataField : GD_VT_ConsNumber, Visible : false}
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		on row inserted
		on row deleted
		on row updated
		this loads
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_VT_Grid", "Entity name should be 'GD_VT_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 9, "Should have '9' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 4, "Should have '4' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=0, ACTIONS=1, TRIGGERS=1
Entity GD_VF_Country is DropDownList in GD_VF_Grid
	with defaults
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Countries
		value REQUEST.CUSTOMER_COUNTRY
	with actions
		load data from DATASOURCE.MDMC_CountryTelephonePrefixes with arguments {Code : GD_VF_Country.Value } in GD_VF_CountryCode
	with triggers
		this changes
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_Country", "Entity name should be 'GD_VF_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_CountryCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VF_CountryCode is TextBox in GD_VF_Grid
	with defaults
		label LABELS.labGD_VF_CountryCode
		enable false
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_CountryCode", "Entity name should be 'GD_VF_CountryCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_Number ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VF_Number is TextBox in GD_VF_Grid
	with defaults
		max length 30
		validation ^[0-9\-\.()\+\s]+
		label LABELS.labGD_VF_Number
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_Number", "Entity name should be 'GD_VF_Number' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_Extension ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VF_Extension is TextBox in GD_VF_Grid
	with defaults
		label LABELS.labGD_VF_Extension
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_Extension", "Entity name should be 'GD_VF_Extension' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_Notes ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VF_Notes is TextBox in GD_VF_Grid
	with defaults
		max length 50
		label LABELS.labGD_VF_Notes
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_Notes", "Entity name should be 'GD_VF_Notes' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_ConsNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VF_ConsNumber is TextBox in GD_VF_Grid
	with defaults
		visible false
		label LABELS.labGD_VF_ConsNumber
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_ConsNumber", "Entity name should be 'GD_VF_ConsNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VF_Default is CheckBox in GD_VF_Grid
	with defaults
		value false
		label LABELS.labGD_VF_Default
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_Default", "Entity name should be 'GD_VF_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=0
Entity GD_VF_btnInsert is Button in GD_VF_Grid
	with defaults
		label LABELS.btnInsert
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VF_Grid", "Entity form should be 'GD_VF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_btnInsert", "Entity name should be 'GD_VF_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VF_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=9, RULES=1, ACTIONS=0, TRIGGERS=4
Entity GD_VF_Grid is Grid in frmMain
	with defaults
		define column GRID_GD_VF_Country		with arguments {ControlID : GD_VF_Country,DataField : GD_VF_Country, Header : LABELS.labCountry,  Visible : true}
		define column GRID_GD_VF_CountryCode	with arguments {ControlID : GD_VF_CountryCode,		DataField : GD_VF_CountryCode, Header : LABELS.labPrefix, Enabled : false, Visible : true}
		define column GRID_GD_VF_Number		with arguments {	ControlID : GD_VF_Number,	DataField : GD_VF_Number, Header : LABELS.labNumber, Visible : true}
		define column GRID_GD_VF_Extension	with arguments {	ControlID : GD_VF_Extension,	DataField : GD_VF_Extension, Header : LABELS.labExtension, Visible : true}
		define column GRID_GD_VF_Notes		with arguments {	ControlID : GD_VF_Notes,	DataField : GD_VF_Notes, Header : LABELS.labNotes, Visible : true}
		define column GRID_GD_VF_Default		with arguments {ControlID : GD_VF_Default,		DataField : GD_VF_Default, Header : LABELS.labDefault, Visible : true}
		define column GRID_GD_VF_ConsNumber	with arguments {	ControlID : GD_VF_ConsNumber,	DataField : GD_VF_ConsNumber, Visible : false}
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		on row inserted
		on row deleted
		on row updated
		this loads
; ----------------------------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_VF_Grid", "Entity name should be 'GD_VF_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 9, "Should have '9' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 4, "Should have '4' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VE_SmtpAddr ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VE_SmtpAddr is TextBox in GD_VE_Grid
	with defaults
		tooltip MESSAGES.MSGEmailSupplier
		label LABELS.labGD_VE_SmtpAddr
		max length 241
		mandatory true
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VE_Grid", "Entity form should be 'GD_VE_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VE_SmtpAddr", "Entity name should be 'GD_VE_SmtpAddr' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VE_Notes ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VE_Notes is TextBox in GD_VE_Grid
	with defaults
		max length 50
		label LABELS.labGD_VE_Notes
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VE_Grid", "Entity form should be 'GD_VE_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VE_Notes", "Entity name should be 'GD_VE_Notes' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VE_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VE_Default is CheckBox in GD_VE_Grid
	with defaults
		value false
		label LABELS.labGD_VE_Default
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VE_Grid", "Entity form should be 'GD_VE_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VE_Default", "Entity name should be 'GD_VE_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VE_ConsNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VE_ConsNumber is TextBox in GD_VE_Grid
 	with defaults
 		visible false
 		label LABELS.labGD_VE_ConsNumber
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VE_Grid", "Entity form should be 'GD_VE_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VE_ConsNumber", "Entity name should be 'GD_VE_ConsNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VE_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity GD_VE_btnInsert is Button in GD_VE_Grid
	with defaults
		label LABELS.labInsert
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VE_Grid", "Entity form should be 'GD_VE_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VE_btnInsert", "Entity name should be 'GD_VE_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VE_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=4
Entity GD_VE_Grid is Grid in frmMain
	with defaults
		; TODO: how to define or set the controls inside? the row definition?
		define column GRID_GD_VE_SmtpAddr		with arguments {ControlID : GD_VE_SmtpAddr,		DataField : GD_VE_SmtpAddr, Header : LABELS.labNumber, Visible : true}
		define column GRID_GD_VE_Notes		with arguments {	ControlID : GD_VE_Notes,	DataField : GD_VE_Notes, Header : LABELS.labNotes, Visible : true}
		define column GRID_GD_VE_Default		with arguments {ControlID : GD_VE_Default,		DataField : GD_VE_Default, Header : LABELS.labDefault, Visible : true}
		define column GRID_GD_VE_ConsNumber	with arguments {	ControlID : GD_VE_ConsNumber,	DataField : GD_VE_ConsNumber, Visible : false}
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		on row inserted
		on row deleted
		on row updated
		this loads
; ----------------------------------------------------------------------------	
;	TODO: DO THIS SOMEWHERE ELSE - CHECK WITH SEB TOO
;	TODO: 24-07-2014(RG): 1) before send data to SAP to create/modify supplier ->
;	search if vendor exists with the same taxcode (STCD1), 
;	if exists get the number to send to SAP in KNA1.LIFNR. If it appears more than one code, 
;	select the first one and send a warning message to GSS Master Data stating that ""there are multiple partners"" 
;	if there are more than one code 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_VE_Grid", "Entity name should be 'GD_VE_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 4, "Should have '4' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_VendorNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=1
Entity GD_Ctr_VendorNumber is TextBox in frmMain
	with defaults
		label LABELS.labCustomerNumber
		max length 10
	with rules
		REQUEST.REQUEST_TYPE is CC then
			this visible false
		else
			this visible true
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
;	field visible for all roles.
;	2) field mandatory for  MD clerk in case account group YCT6. 
;		(See APE list in sheet """"Other documents"""" to display DDL to select the legal activity and translate from ISIC code in SAP). 
;	3) for account group YCT5, use DDL the excel file attached called """"ISIC italian convertion"""". 
;		the DDL shown to the ROLES.ENQ is the collumn C and should then insert specific data in field KNA1-BRSCH and KNA1-BRAN1
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_VendorNumber", "Entity name should be 'GD_Ctr_VendorNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_Industry ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=2, ACTIONS=1, TRIGGERS=2
Entity GD_Ctr_Industry is DropDownList in frmMain
	with defaults
		mandatory true
		visible true
		label LABELS.labIndustries
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Industries with arguments {FlagActive: true, Country : REQUEST.COUNTRY}
	with actions
		; put the return of this search operation which should return only one value in control GD_Ctr_IindustryCode
		load data from DATASOURCE.MDMC_ItalyIndustries with output {GD_Ctr_IndustryCode.Value : KNA1_BRAN1}
	with rules
		; REQUEST.ACCOUNT_GROUP in {YCT6, YVT6} then
		; 	load data from DATASOURCE.MDMC_Industries with arguments {FlagActive: true, Country : FR}
		; 	; this equals to this line in original code
		; 	; TODO: WHY? this.m_mdmSessionInfo.IndustryCountry = Business.Constants.Countries.France;
		; 	; most likely unneeded?
		; 	; set value FR in REQUEST.INDUSTRY_COUNTRY
		REQUEST.ACCOUNT_GROUP in {YCT6, YVT6} and REQUEST.CURRENT_ROLE is ROLES.RCO then
			this mandatory true
		; REQUEST.ACCOUNT_GROUP in {YCT9, YVT9} then
		; 	load data from DATASOURCE.MDMC_Industries with arguments {FlagActive: true, Country : ""EN""}
		; 	; this.m_mdmSessionInfo.IndustryCountry = Business.Constants.Countries.France;
		; 	; set value ""EN"" in REQUEST.INDUSTRY_COUNTRY
		; 	mandatory false
		; DONE with a updating of the table MDMC_INdustries - NO NEED TO DO THIS FOR BRSCH, ONLY FOR BRAN1
		; REQUEST.COUNTRY is IT and GD_Ctr_Industry is not empty then
		; 	;	3) for account group YCT5, use DDL the excel file attached called """"ISIC italian convertion"""". 
		; 	;		the DDL shown to the ROLES.ENQ is the collumn C and should then insert specific data in field KNA1-BRSCH and KNA1-BRAN1
		; 	load data from DATASOURCE.MDMC_ItalyIndustries with arguments {FlagActive: true, Code:GD_Ctr_Industry.Value} with output {GD_Ctr_IndustryCode.Value : KNA1_BRAN1} 
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE is ROLES.SUS or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_Industry", "Entity name should be 'GD_Ctr_Industry' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_IndustryCode ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=1
Entity GD_Ctr_IndustryCode is DropDownList in frmMain
	; always like this except for Italy
	with defaults
		enabled false
		visible false
		label LABELS.lblIndustryCode
		data field DisplayValue
		value field KNA1_BRSCH
		load data from DATASOURCE.MDMC_ItalyIndustries
	with rules
		REQUEST.COUNTRY is IT then
			this visible true
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_IndustryCode", "Entity name should be 'GD_Ctr_IndustryCode' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_UnsubscribeCMD ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, ACTIONS=1, TRIGGERS=2
Entity GD_Ctr_UnsubscribeCMD is DropDownList in frmMain
	with defaults
		label LABELS.labUnsubscribeCMD
		data field DisplayName
		value field Code
		load data from DATASOURCE.UnsubscribeOptions
	with actions
		set value GD_Ctr_UnsubscribeCMD.Value in BLK_GD_Ctr_UnsubscribeCMD
	with rules
		REQUEST.REQUEST_TYPE is CC then
			this enable false
			this visile false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_UnsubscribeCMD", "Entity name should be 'GD_Ctr_UnsubscribeCMD' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=0, ACTIONS=0, TRIGGERS=0
Entity V_Country is DropDownList in V_Grid
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labCountry
		load data from DATASOURCE.MDMC_Countries
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "V_Grid", "Entity form should be 'V_Grid' but is " + e.Form );
			Assert.That ( e.Name == "V_Country", "Entity name should be 'V_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_VATNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity V_VATNumber is TextBox in V_Grid
	with defaults
		label LABELS.labNumber
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "V_Grid", "Entity form should be 'V_Grid' but is " + e.Form );
			Assert.That ( e.Name == "V_VATNumber", "Entity name should be 'V_VATNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=0, ACTIONS=0, TRIGGERS=0
Entity V_btnInsert is Button in V_Grid
	with defaults
		label LABELS.labInsert
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "V_Grid", "Entity form should be 'V_Grid' but is " + e.Form );
			Assert.That ( e.Name == "V_btnInsert", "Entity name should be 'V_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_V_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=0, TRIGGERS=4
Entity V_Grid is Grid in frmMain
	with defaults
		define column GRID_V_Country		with arguments {ControlID : V_Country, DataField : V_Country, Header : LABELS.labCountry,  Visible : true}
		define column GRID_V_VATNumber		with arguments {ControlID : V_VATNumber, 		DataField : V_VATNumber, Header : LABELS.labVATNumber, Visible : true}
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		on row inserted
		on row deleted
		on row updated
		this loads
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "V_Grid", "Entity name should be 'V_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 4, "Should have '4' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_Country ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=1, ACTIONS=1, TRIGGERS=2
Entity GD_VB_Country is DropDownList in GD_VB_Grid
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labCountry
		load data from DATASOURCE.MDMC_Countries
		mandatory true
	with rules
		; call SP to find out if selected value is Tax Haven
		DATASOURCE.MDMC_IsCountryATaxHaven with arguments {CountryCode: B_GD_VB_Country.Value} is true then
			set value 09 in GD_Ctr_RiskClassification
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_Country", "Entity name should be 'GD_VB_Country' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_BankKey ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, ACTIONS=1, TRIGGERS=3
Entity GD_VB_BankKey is TextBox in GD_VB_Grid
	with defaults
		label LABELS.labGD_VD_BankKey
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9,YVT6,YVT9} then
			max length 10
		else
			max length 15
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		this changes
		GD_VB_Country changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_BankKey", "Entity name should be 'GD_VB_BankKey' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 3, "Should have '3' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_BankAccount ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=2, ACTIONS=1, TRIGGERS=3
Entity GD_VB_BankAccount is TextBox in GD_VB_Grid
	with defaults
		label LABELS.labGD_VD_BankAccount
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9,YVT6,YVT9} then
			max length 11
		else
			max length 18
		B_GD_VB_Country.Value is BE and GD_VB_BankAccount.Value.Length >= 3 then
			set value SUBSTRING(GD_VB_BankKey,0,3) in GD_VB_BankKey
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		B_GD_VB_Country changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_BankAccount", "Entity name should be 'GD_VB_BankAccount' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 3, "Should have '3' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_BankControlKey ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=1, TRIGGERS=1
Entity GD_VB_BankControlKey is TextBox in GD_VB_Grid
	with defaults
		max length 2
		label LABELS.labGD_VD_BankControlKey
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change	
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_BankControlKey", "Entity name should be 'GD_VB_BankControlKey' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_IBAN ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=1, TRIGGERS=3
Entity GD_VB_IBAN is TextBox in GD_VB_Grid
	with defaults
		label LABELS.labGD_VD_IBAN
	with actions
		; TODO: POPULATION FOR THE UNDERLYING TABLE HAS TO BE FINISHED
		load data from DATASOURCE.MDMC_GetIBANConfigurationForCountry with arguments {CountryCode:B_GD_VB_Country.Value, IBAN:B_GD_VB_IBAN.Value} with output {B_GD_VB_BankKey:BankKey,B_GD_VB_BankAccount:BankAccount,B_GD_VB_BankControlKey:BankControlKey}
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6,YCT9,YVT6,YVT9} then
			max length 27
		else
			max length 35
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		this changes
		B_GD_VB_Country changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_IBAN", "Entity name should be 'GD_VB_IBAN' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 3, "Should have '3' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_PartBankType ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4 RULES=2, TRIGGERS=1
Entity GD_VB_PartBankType is TextBox in GD_VB_Grid
	with defaults
		label LABELS.labGD_VB_PartBankType
		max length 4
	with rules
		REQUEST.ACCOUNT_GROUP not in {YCT6,YCT9,YVT6,YVT9} then
			max length 4
	with triggers 
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_PartBankType", "Entity name should be 'GD_VB_PartBankType' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_BankReferDetails ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity GD_VB_BankReferDetails is TextBox in GD_VB_Grid
	with defaults
		max length 20	
		label LABELS.labGD_VB_BankReferDetails
; ---------------------------------------------------------------------------- 
; TODO: TO BE CONNECTED IN THE WEB SERVICES TO AND FROM SAP
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_BankReferDetails", "Entity name should be 'GD_VB_BankReferDetails' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_SWIFT ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity GD_VB_SWIFT is TextBox in frmMain
	with defaults
		label LABELS.labGD_VD_SWIFT
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_SWIFT", "Entity name should be 'GD_VB_SWIFT' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_AccountHolder ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, ACTIONS=1, TRIGGERS=1
Entity GD_VB_AccountHolder is TextBox in GD_VB_Grid
	with defaults
		label LABELS.labGD_VD_AccountHolder
		value GD_Adr_Name.Value
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		this changes
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_AccountHolder", "Entity name should be 'GD_VB_AccountHolder' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNA1_XZEMP ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, TRIGGERS=1
Entity KNA1_XZEMP is CheckBox in GD_VB_Grid
	with defaults
		label LABELS.lblKNA1_XZEMP
		value true
		visible false
	with rules
		REQUEST.COMPANY_CODE in {5101, 5109} or REQUEST.ACCOUNT_GROUP in {YCT1,YCT2,YCT9} then
			visible true
	with triggers 
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "KNA1_XZEMP", "Entity name should be 'KNA1_XZEMP' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_BankCity ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity GD_VB_BankCity is TextBox in GD_VB_Grid
	with defaults
		label LABELS.labGD_VD_BankCity
		max length 20
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_BankCity", "Entity name should be 'GD_VB_BankCity' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=6, TRIGGERS=1
Entity GD_VB_btnInsert is Button in GD_VB_Grid
	with defaults
		label LABELS.labInsert
	with rules
		; TODO: -bank country Belgium: validate format 111-1111111-11 and position of bank key in bank account
		; TODO: CHECK WITH SEB, how to distinguish between warnings (continue processing) and errors (Stop processing) in messaging
		REQUEST.COUNTRY is ES then
			set value MESSAGES.MSGCustomerBankSpain in MESSAGE_POPUP
		REQUEST.COUNTRY is IT or GD_VB_Country.Value is IT then and GD_VB_BankKey is empty then
			set value MESSAGES.ERRBankItaly in MESSAGE_POPUP
		REQUEST.COUNTRY is IT or GD_VB_Country.Value is IT then and GD_VB_BankKey.Value.Length != 10 then
			set value MESSAGES.ERRBankItaly in MESSAGE_POPUP
		REQUEST.COUNTRY is IT and B_GD_VB_Country.Value is IT and B_GD_VB_SWIFT.Value.Length is not 11 then
			set value MESSAGES.ERRfieldSWIFT in MESSAGE_POPUP
		B_GD_VB_IBAN is empty and B_GD_VB_BankAccount is empty then
			set value MESSAGES.ERRfieldIban in MESSAGE_POPUP
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
			this visible false
	with triggers 
		this loads
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "GD_VB_Grid", "Entity form should be 'GD_VB_Grid' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_btnInsert", "Entity name should be 'GD_VB_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 6, "Should have '6' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=14, RULES=1, ACTIONS=1, TRIGGERS=4
Entity GD_VB_Grid is Grid in frmMain
	with defaults
		define column GRID_GD_VB_Country		with arguments {ControlID : GD_VB_Country,   DataField : GD_VB_Country, Header : LABELS.labCountry,  Visible : true}
		define column GRID_GD_VB_BankKey		with arguments {ControlID : GD_VB_BankKey,		DataField : GD_VB_BankKey, Header : LABELS.labBankKey, Visible : true}
		define column GRID_GD_VB_BankAccount	with arguments {ControlID : GD_VB_BankAccount,	DataField : GD_VB_BankAccount, Header : LABELS.labBankAccount, Visible : true}
		define column GRID_GD_VB_BankControlKey	with arguments {ControlID : GD_VB_BankControlKey,	DataField : GD_VB_BankControlKey, Header : LABELS.labBankControlKey, Visible : true}
		define column GRID_GD_VB_IBAN			with arguments {ControlID : GD_VB_IBAN,	DataField : GD_VB_IBAN, Header : LABELS.labIBAN, Visible : true}
		define column GRID_GD_VB_SWIFT		with arguments {	ControlID : GD_VB_SWIFT,   DataField : GD_VB_SWIFT, Header : LABELS.labSWIFT, Visible : false}
		define column GRID_GD_VB_NameOfBank	with arguments {	ControlID : GD_VB_NameOfBank,   DataField : GD_VB_NameOfBank, Header : LABELS.labNameOfBank, Visible: false}
		define column GRID_GD_VB_AccountHolder	with arguments {ControlID : GD_VB_AccountHolder,	DataField : GD_VB_AccountHolder, Header : LABELS.labAccountHolder, Visible : true}
		define column GRID_GD_VB_BankCity	with arguments {	ControlID : GD_VB_BankCity,   DataField : GD_VB_BankCity, Header : LABELS.labBankCity, Visible : false}
		define column GRID_GD_VB_PartBankType	with arguments {ControlID : GD_VB_PartBankType ,	DataField : GD_VB_PartBankType, Header : LABELS.labPartBankType, Visible : false}
		define column GRID_GD_VB_BankReferDetails	with arguments { ControlID : ,	DataField : GD_VB_BankReferDetails, Header : LABELS.labBankReferDetails, Visible: false}
		define column GRID_RelevantFlag	with arguments {ControlID : RelevantFlag, DataField : RelevantFlag, Visible : false}
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers
		on row inserted
		on row deleted
		on row updated
		this loads
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_Grid", "Entity name should be 'GD_VB_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 14, "Should have '14' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 4, "Should have '4' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_VB_XEZER ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity GD_VB_XEZER is CheckBox in frmMain
	with defaults
		label LABELS.labGD_VB_XEZER
		value true
; ----------------------------------------------------------------------------	
;	TODO: PENDING REFINEMENT
;	MDMC_LegalForms for informing fields isnaturalperson and customerclassification and set dunning procedure with this data
;	4) this field is not retrieved from SAP
;	5) this field is sent to SAP
;	6) this field is used to set values in creations from scratch, regional country France, in XKNKK.GRUPP, XKNKK.CTLPC and XKNKK.DBRTG with table MDMC_CreditLimitTemplate
;	7) see attachment.
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_VB_XEZER", "Entity name should be 'GD_VB_XEZER' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_GFORM ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=5, ACTIONS=1, TRIGGERS=2
Entity GD_Ctr_GFORM is DropDownList in frmMain
	with defaults
		label LABELS.labLegalForm
		visible false
		; data source is same for vendors and customers
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_LegalForms with arguments {FlagActive : true }
	with actions
		load data from DATASOURCE.MDMC_LegalForms with arguments {FlagActive : true, Code : GD_Ctr_GFORM.Value } with output {GD_Ctr_IsNaturalPerson.Value : KNA1_STKZN, GD_Ctr_CustomerClassification.Value : KNA1_KUKLA}
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YVT6, YCT7, YCT9} and REQUEST.ROLE is ROLES.CLERK then
			this visible true
			this mandatory true
		REQUEST.ACCOUNT_GROUP in {YCT7, YCT9} then
			; TODO: check if this name is correct - it's the tab for CREDIT LIMIT
			tab_CL visible true
		REQUEST.ACCOUNT_GROUP not in {YCT7, YCT9} then
			; TODO: check if this name is correct - it's the tab for CREDIT LIMIT
			tab_CL visible true
		REQUEST.CUSTOMER_COUNTRY in {FR, GF, GP, RE, MQ, YT} then
			this visible true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_GFORM", "Entity name should be 'GD_Ctr_GFORM' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_PIVA ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=16, TRIGGERS=2
Entity GD_Ctr_PIVA is TextBox in frmMain
	with defaults
		label LABELS.lblLocalVATTaxCode
		max length 16
	with rules
		REQUEST.ACCOUNT_GROUP is YCT1 then
			max length 10
			; TODO: CHECK WITH SEB THIS SORT OF CONCATENATION.... OR MOVE TO A SPECIFIC DATASOURCE FOR THIS?
			set value GD_Adr_Country.Code in GD_Ctr_VATRegistrationNumber
			add value GD_Ctr_PIVA.Value in GD_Ctr_VATRegistrationNumber
		REQUEST.ACCOUNT_GROUP is YCT2 then
			max length 8
			set value GD_Adr_Country.Code in GD_Ctr_VATRegistrationNumber
			add value GD_Ctr_PIVA.Value in GD_Ctr_VATRegistrationNumber
		REQUEST.ACCOUNT_GROUP is YCT3 then
			max length 9
		REQUEST.ACCOUNT_GROUP is YCT3 and REQUEST.REQUEST_TYPE is CC and REQUEST.COUNTRY is not ES then
			set value GD_Adr_Country.Code in GD_Ctr_VATRegistrationNumber
			add value GD_Ctr_PIVA.Value in GD_Ctr_VATRegistrationNumber
		REQUEST.ACCOUNT_GROUP is YCT3 and GD_Ctr_PIVA.Value starts with {P,Q,S} then
			set value G in GD_Ctr_CustomerClassification
		REQUEST.ACCOUNT_GROUP is YCT3 and GD_Ctr_PIVA.Value starts with {X,0,1,2,3,4,5,6,7,8,9} then
			set value true in GD_Ctr_IsNaturalPerson
		REQUEST.ACCOUNT_GROUP is YCT3 and GD_Ctr_PIVA.Value not starts with {X,0,1,2,3,4,5,6,7,8,9} then
			set value false in GD_Ctr_IsNaturalPerson
		REQUEST.ACCOUNT_GROUP is YCT4 then
			max length 9
			set value GD_Adr_Country.Code in GD_Ctr_VATRegistrationNumber
			add value GD_Ctr_PIVA.Value in GD_Ctr_VATRegistrationNumber
		REQUEST.ACCOUNT_GROUP is YCT4 and GD_Ctr_VATRegistrationNumber starts with {1,2,3} then
			set value true in GD_Ctr_IsNaturalPerson
			GD_Ctr_TaxCode2 mandatory true
			; TODO: REQUIRES PARSER CHANGE
			GD_Ctr_TaxCode2 max length 11
			; TODO: DOES NOT WORK WELL
			; GD_Ctr_TaxCode2 validation ""^[0-9]{11}$""		
		REQUEST.ACCOUNT_GROUP is YCT4 and GD_Ctr_VATRegistrationNumber not starts with {1,2,3} then
			set value false in GD_Ctr_IsNaturalPerson
		REQUEST.ACCOUNT_GROUP is YCT5 then
			max length 16
		REQUEST.ACCOUNT_GROUP is YCT6 then
			max length 14
			set value GD_Ctr_PIVA.Value in GD_Ctr_TaxCode1
			set value SUBSTRING(GD_Adr_Country.Code,0,9) in GD_Ctr_TaxCode2
		REQUEST.ACCOUNT_GROUP is YCT6 and GD_Adr_Country.Value in {FR,GF,RP,MQ,RE} then
			this mandatory true
			validation ^[0-9]{14}$
		REQUEST.ACCOUNT_GROUP is YCT6 and GD_Adr_Country.Value in {MC,NC,PF,PM,WE,YT} then
			this visible false
			GD_Ctr_TaxCode1 mandatory false
			GD_Ctr_TaxCode1 enabled true
			GD_Ctr_TaxCode2 mandatory false
			GD_Ctr_TaxCode2 enabled true
			GD_Ctr_VATRegistrationNumber mandatory false
			GD_Ctr_VATRegistrationNumber enabled true
			set value GD_Ctr_PIVA.Value in GD_Ctr_TaxCode1
			set value SUBSTRING(GD_Ctr_PIVA.Value,9) in GD_Ctr_TaxCode1
		REQUEST.ACCOUNT_GROUP is YCT7 then
			set value GD_Ctr_PIVA.Value in GD_Ctr_TaxCode1
			set value GD_Adr_Country.Code in GD_Ctr_VATRegistrationNumber
			add value GD_Ctr_PIVA.Value in GD_Ctr_VATRegistrationNumber
		; REQUEST.REQUEST_TYPE is CC or REQUEST.COUNTRY is FR then
		; 	this enable true
		; REQUEST.COUNTRY is IT and REQUEST.REQUEST_TYPE is CC then
		; 	this visible true
		; REQUEST.COUNTRY is IT and REQUEST.REQUEST_TYPE is not CC then
		; 	this visible false
		; 
		; 
		; REQUEST.ACCOUNT_GROUP in YCT5 is YCT3 then
		; 	max length 11
		; REQUEST.ACCOUNT_GROUP is YCT6 and REQUEST.REQUEST_TYPE is CC and GD_Ctr_IsNaturalPerson.Value is false then
		; 	this mandatory true
		; REQUEST.ACCOUNT_GROUP is YCT6 and REQUEST.CURRENT_ROLE in {ROLES.CLERK, ROLES.ENQ} then
		; 	this enable true
		; REQUEST.ACCOUNT_GROUP is YCT9 then 
		; 	max length 5
		; 	this mandatory false
		; GD_Adr_Country.Value is GR and REQUEST.REQUEST_TYPE is CC then
		; 	this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_PIVA", "Entity name should be 'GD_Ctr_PIVA' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 16, "Should have '16' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_CF ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, TRIGGERS=1
Entity GD_Ctr_CF is TextBox in frmMain
	with defaults
		label LABELS.labCF
		visible false
	with rules
		REQUEST.COMPANY_CODE in {5180,5116,596G} and REQUEST.REQUEST_TYPE is CC then
			this enable true
			this visible true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_CF", "Entity name should be 'GD_Ctr_CF' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Com_TransportZone ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=2, RULES=2, TRIGGERS=1
Entity GD_Com_TransportZone is TextBox in frmMain
	with defaults
		visible false
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
		REQUEST.CUSTOMER_COUNTRY is ES and GD_Com_TransportZone.Value is empty then
			set value substring(GD_Adr_PostalCode,2) in GD_Com_TransportZone.Value 
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; TESGTEN : DEFAULTS=3, RULES=2, TRIGGERS=1
; TODO: CHECK FOR VISIBLE IN DIFFERENT FLOWTYPES
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Com_TransportZone", "Entity name should be 'GD_Com_TransportZone' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 2, "Should have '2' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_PT_PaymentTerms ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=9, TRIGGERS=1
Entity CC_PT_PaymentTerms is DropDownList in frmMain
	with defaults
		label LABELS.labPTPaymentTerms
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_PaymentTerms with arguments {FlagActive : true, ClusterCountryCode : REQUEST.COUNTRY}
	with rules
		REQUEST.COMPANY_CODE is 5140 and GD_Adr_Country.Value in {FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC} then
			set value 6115 in CC_PT_PaymentTerms
			set value 6115 in SO_TermsOfPaymentKey
		REQUEST.COMPANY_CODE is 5140 and GD_Adr_Country.Value not in {FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC} then
			set value 6000 in CC_PT_PaymentTerms
			set value 6000 in SO_TermsOfPaymentKey
		REQUEST.COUNTRY is PT and REQUEST.REQUEST_TYPE in {CC, VC_CC} then
			this visible false
			CC_PT_PaymentTerms mandatory false
		REQUEST.COUNTRY in {BE,LU} and REQUEST.REQUEST_TYPE in {VC, VC_CC} then
			set value 1109 in CC_PT_PaymentTerms
		REQUEST.COUNTRY is ES and REQUEST.REQUEST_TYPE in {VC, VC_CC} then
			; set value 3M60 in CC_PT_PaymentTerms
			set value 3E60 in CC_PT_PaymentTerms
		REQUEST.COUNTRY is LU and REQUEST.REQUEST_TYPE in {VC, VC_CC} then
			set value 1113 in CC_PT_PaymentTerms
			set value 1113 in SO_TermsOfPaymentKey
		; REQUEST.COMPANY_CODE is 5140 and REQUEST.REQUEST_TYPE in {VC, VC_CC} and REQUEST.CUSTOMER_COUNTRY in {FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC} then
		; 	set value 6115 in CC_PT_PaymentTerms
		; 	set value 6115 in SO_TermsOfPaymentKey
		; 
		; REQUEST.COMPANY_CODE is 5140 and REQUEST.REQUEST_TYPE in {VC, VC_CC} and REQUEST.CUSTOMER_COUNTRY not in {FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC} then
		; 	set value 6000 in CC_PT_PaymentTerms
		; 	set value 6000 in SO_TermsOfPaymentKey
		; REQUEST.COMPANY_CODE in {5150,5180,596G} and REQUEST.REQUEST_TYPE in {VC, VC_CC} then
		REQUEST.COMPANY_CODE in {5150,5180,596G} then
			set value '' in CC_PT_PaymentTerms
		REQUEST.COUNTRY is FR then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; TODO: ""2.6.14(MI) GSS, please, check and provide the business rule. Additionally, CR """"IA_SEPA_payment methods"""" ispending on clarification in your side yet
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_PT_PaymentTerms", "Entity name should be 'CC_PT_PaymentTerms' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 9, "Should have '9' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_PT_PaymentMethods ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=10, TRIGGERS=2
Entity CC_PT_PaymentMethods is DropDownList in frmMain
	with defaults
		label LABELS.labPTPaymentMethods
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_PaymentMethods with arguments {FlagActive : true, ClusterCountryCode: REQUEST.COUNTRY}
	with rules
		REQUEST.COUNTRY in {ES, FR} then
			this mandatory true
		REQUEST.COUNTRY is PT then
			this mandatory false
		REQUEST.COUNTRY is IT and CC_PT_PaymentMethods.Value is L then
			B_GD_VB_BankKey mandatory true
		REQUEST.COUNTRY is PT and CC_PT_PaymentMethods.Value in {P, M} then
			B_GD_VB_BankKey mandatory true
		REQUEST.COUNTRY is FR and CC_PT_PaymentMethods.Value in {M, A} then
			B_GD_VB_BankKey mandatory true
		REQUEST.CURRENT_ROLE is ENQ and REQUEST.REQUEST_TYPE not in {CM, CM_BLK} and REQUEST.COUNTRY is ES and REQUEST.CUSTOMER_COUNTRY is ES then
			set value G in CC_PT_PaymentMethods
		REQUEST.CURRENT_ROLE is ENQ and REQUEST.REQUEST_TYPE not in {CM, CM_BLK} and REQUEST.COUNTRY is ES and REQUEST.CUSTOMER_COUNTRY is not ES then
			set value Y in CC_PT_PaymentMethods
		REQUEST.CURRENT_ROLE is ENQ and REQUEST.REQUEST_TYPE not in {CM, CM_BLK} and REQUEST.COUNTRY is FR and REQUEST.CUSTOMER_COUNTRY is FR then
			set value G in CC_PT_PaymentMethods
		REQUEST.CURRENT_ROLE is ENQ and REQUEST.REQUEST_TYPE not in {CM, CM_BLK} and REQUEST.COUNTRY is FR and REQUEST.CUSTOMER_COUNTRY is not FR then
			set value Y in CC_PT_PaymentMethods
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_PT_PaymentMethods", "Entity name should be 'CC_PT_PaymentMethods' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 10, "Should have '10' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_PT_ClearingWithCustomer ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, TRIGGERS=1
Entity CC_PT_ClearingWithCustomer is CheckBox in frmMain
	with defaults
		label LABELS.labCC_PT_ClearingWithCustomer
	with rules
		; TODO: CHECK WITH SEB MODEL
		REQUEST.COMPANY_CODE in {5101, 5109} and REQUEST.CC_PT_ClearingWithCustomer then
			set value true in CC_PT_ClearingWithCustomer
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_PT_ClearingWithCustomer", "Entity name should be 'CC_PT_ClearingWithCustomer' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_PT_IndividualPayment ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=2, TRIGGERS=1
Entity CC_PT_IndividualPayment is CheckBox in frmMain
	with defaults
		label LABELS.labSinglePayment
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
		; TODO: WWHAT ABOUT THIS?
		REQUEST.COMPANY_CODE in {5101, 5109} then
			set value true in CC_PT_IndividualPayment
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_PT_IndividualPayment", "Entity name should be 'CC_PT_IndividualPayment' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_CO_AccountingClerk ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=12, TRIGGERS=1
Entity CC_CO_AccountingClerk is DropDownList in frmMain
	with defaults
		label LABELS.labCC_CO_AccountingClerk
		load data from DATASOURCE.MDMC_AccountingClerks with arguments {FlagActive : true, CompanyCode : REQUEST.COMPANY_CODE}
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_AccountingClerks with arguments {FlagActive : true, CompanyCode : REQUEST.COMPANY_CODE}
	with rules
		REQUEST.COUNTRY is FR and REQUEST.CURRENT_ROLE is ROLES.CLERK then
			this mandatory true
		REQUEST.COUNTRY in {IT, GR} then
			this mandatory false
		REQUEST.COUNTRY is FR then
			this mandatory true
		; Seems deprecated
		; REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.COUNTRY is ES then
		; 	set value 81 in CC_CO_AccountingClerk
		; 	set value 81 in CC_CO_AccountingClerk.OldDisplayValue
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.COMPANY_CODE is 5109 then
			set value MM in CC_CO_AccountingClerk
			set value MM in CC_CO_AccountingClerk.OldDisplayValue
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.SALES_ORGANIZATION is 1E0E then
			set value 95 in CC_CO_AccountingClerk
			set value 95 in CC_CO_AccountingClerk.OldDisplayValue
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.SALES_ORGANIZATION in {10L0,10Q1} then
			set value 87 in CC_CO_AccountingClerk
			set value 87 in CC_CO_AccountingClerk.OldDisplayValue
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.SALES_ORGANIZATION in {10A0, 10A1, 10B0} then
			set value 93 in CC_CO_AccountingClerk
			set value 93 in CC_CO_AccountingClerk.OldDisplayValue
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.SALES_ORGANIZATION in {10F0, 10F1, 10F2, 10F3, 10G0, 10G1, 10H0, 10I0, 10P0, 10Z0} then
			set value 92 in CC_CO_AccountingClerk
			set value 92 in CC_CO_AccountingClerk.OldDisplayValue
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.COMPANY_CODE is 563M then
			set value 20 in CC_CO_AccountingClerk
			set value 20 in CC_CO_AccountingClerk.OldDisplayValue
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.COUNTRY in {ES,AD} then
			load data from DATASOURCE.MDMC_AccountingClerkByPostCodeAndSalesArea with arguments {PostCode : SUBSTRING(GD_Adr_PostalCode,2), SalesArea: REQUEST.SALES_ORGANIZATION} in CC_CO_AccountingClerk
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and REQUEST.COMPANY_CODE in {5240,5101,5109} then
			load data from DATASOURCE.MDMC_AccountingClerksFORPTBELU with arguments { SalesOrganization: REQUEST.SALES_ORGANIZATION, FlagActive: true} with output {CC_CO_AccountingClerk: AccountingClerk}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; TODO: ;5)specific rules for company 5140 see attachemnt RulesDunningArea5140 and sheet """"Dunning Procedure"""" in sheet “Other documents”
; TODO: THIS HAS TO BE MOVED TO THE WEB SERVICE
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_CO_AccountingClerk", "Entity name should be 'CC_CO_AccountingClerk' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 12, "Should have '12' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_DD_DunningProcedure ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=11, TRIGGERS=1
Entity CC_DD_DunningProcedure is DropDownList in frmMain
	with defaults
		label LABELS.labDDDunningprocedure
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDM_DunningProcedure with arguments {FlagActive : true, ClusterCountryCode: REQUEST.COUNTRY}
		visible false
	with rules
		REQUEST.COUNTRY is FR then
			this mandatory true
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.COUNTRY is FR then
			this visible true
		REQUEST.REQUEST_TYPE not in {CC,CC_CC} then
			this visible true
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.COUNTRY is ES then
			set value Y302 in CC_DD_DunningProcedure
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.COUNTRY is IT then
			set value Y502 in CC_DD_DunningProcedure
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.COUNTRY is PT then
			set value Y400 in CC_DD_DunningProcedure
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.COUNTRY is BE and GD_Ctr_CustomerClassification.Value is NG then
			set value Y104 in CC_DD_DunningProcedure
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.COUNTRY is BE and GD_Ctr_CustomerClassification.Value is G then
			set value Y102 in CC_DD_DunningProcedure
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.COUNTRY is LU then
			set value Y203 in CC_DD_DunningProcedure
		REQUEST.REQUEST_TYPE in {CC,CC_CC} and REQUEST.CUSTOMER_COUNTRY is GR then
			set value Y704 in CC_DD_DunningProcedure
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; SEEM USELESS, never made visible
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_DD_DunningProcedure", "Entity name should be 'CC_DD_DunningProcedure' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 11, "Should have '11' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_DD_DunningArea ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, TRIGGERS=1
Entity CC_DD_DunningArea is DropDownList in frmMain
	with defaults
		visible false
		label LABELS.labDunningArea
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; TODO: INJECT ABOUT KNB1_XAUSZ in WEB SERVICE?  -- CHECK WITH SEB ABOUT HIDDEN FIELDS, CAN WE INCLUDE HERE?
; TODO: ALSO ABOUT CC_DD_DunningClerk
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_DD_DunningArea", "Entity name should be 'CC_DD_DunningArea' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CC_AR_PledgeIndicator ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=5, ACTIONS=1, TRIGGERS=2
Entity CC_AR_PledgeIndicator is DropDownList in frmMain
	with defaults
		label LABELS.labARPledgeIndicator
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_GetARPledgeIndicators with arguments {CompanyCode : REQUEST.COMPANY_CODE}
	with rules
		REQUEST.COMPANY_CODE in { 5109, 4297, 461D, 596G, 596G } then
			this visible false
		REQUEST.REQUEST_TYPE in {CC, CC_CC} and CC_AR_PledgeIndicator.OldDisplayValue is empty then
			set value WE in CC_AR_PledgeIndicator
			set value WE in CC_AR_PledgeIndicator.OldDisplayValue
		REQUEST.COUNTRY in {ES,FR,GR} and CC_AR_PledgeIndicator.OldDisplayValue is empty then
			set value '' in CC_AR_PledgeIndicator
			set value '' in CC_AR_PledgeIndicator.OldDisplayValue
		REQUEST.COMPANY_CODE is 5101 and CC_AR_PledgeIndicator.OldDisplayValue is empty then
			set value '' in CC_AR_PledgeIndicator
			set value '' in CC_AR_PledgeIndicator.OldDisplayValue
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
; --- BEGIN SALES ORDER PART ---
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CC_AR_PledgeIndicator", "Entity name should be 'CC_AR_PledgeIndicator' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_BZIRK ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=4, TRIGGERS=1
Entity KNVV_BZIRK is DropDownList in frmMain
	with defaults
		visible false
		label LABELS.labBZIRK
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_SalesDistrict
	with rules
		REQUEST.COUNTRY is FR then
			this visible true
		REQUEST.COUNTRY is FR AND REQUEST.KNVV_BZIRK is empty then
			set value '' in KNVV_BZIRK
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9, YVT6, YVT9} then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_BZIRK", "Entity name should be 'KNVV_BZIRK' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_CustomerGroup ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=3, TRIGGERS=1
Entity SO_CustomerGroup is DropDownList in frmMain
	with defaults
		label LABELS.labCustomerGroups
		mandatory true
		; by default no value is selected
		value ''
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_CustomerGroups with arguments {FlagActive : true, CompanyCode : REQUEST.COMPANY_CODE}
	with rules
		REQUEST.COUNTRY is FR and REQUEST.REQUEST_TYPE in {CC, CC_CC, CC_SO} then
			set value 01 in SO_CustomerGroup
		REQUEST.COUNTRY in {IT, LU} and REQUEST.REQUEST_TYPE in {CC, CC_CC, CC_SO} then
			set value 12 in SO_CustomerGroup
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads		
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_CustomerGroup", "Entity name should be 'SO_CustomerGroup' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_SalesOffice ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=2, TRIGGERS=1
Entity SO_SalesOffice is DropDownList in frmMain
	with defaults
		; visible false
		; TODO: CHECK in code only visible if items are loaded
		visible true
		label LABELS.labSO_SalesOffice
		mandatory true
		data field DisplayName
		value field SalesOffice
		load data from DATASOURCE.MDMC_SalesOffice with arguments { ClusterPOCode : REQUEST.SALES_ORGANIZATION, ClusterCompanyCode : REQUEST.COMPANY_CODE, DistributionChannel : REQUEST.DISTRIBUTION_CHANNEL, FlagActive : true}
	with rules
		; only show the control if there are data loaded from the 'load data from' instruction
		; TODO: CHECK WITH SEB about this
		this.Items.Count > 0 then
			SO_SalesOffice visible true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_SalesOffice", "Entity name should be 'SO_SalesOffice' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_EIKTO ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=2, TRIGGERS=1
Entity KNVV_EIKTO is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labEIKTO
		mandatory true
	with rules
		REQUEST.COUNTRY is FR then
			KNVV_EIKTO visible true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_EIKTO", "Entity name should be 'KNVV_EIKTO' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_VKGRP ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=2, TRIGGERS=1
Entity KNVV_VKGRP is DropDownList in frmMain
	with defaults
		label LABELS.labVKGRP
		data field DisplayName
		value field Code
	with rules
		; REQUEST.COUNTRY is FR then
		; 	this visible true
		; 	this mandatory false
		REQUEST.REQUEST_TYPE not in {CC,CC_CC} and SO_SalesOffice.Value is not empty then
			load data from DATASOURCE.[MDMC_GetSalesGroups] with arguments {SalesOffice : REQUEST.SALES_ORGANIZATION}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_VKGRP", "Entity name should be 'KNVV_VKGRP' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_SalesOrderCurrency ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=2, TRIGGERS=1
Entity SO_SalesOrderCurrency is DropDownList in frmMain
	with defaults
		label LABELS.labSaleOrderCurrency
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Currencies with arguments {FlagActive : true}
		value EUR
	with rules
		REQUEST.REQUEST_TYPE is CC then
			set value EUR in SO_SalesOrderCurrency
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_SalesOrderCurrency", "Entity name should be 'SO_SalesOrderCurrency' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KONDA ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=1, TRIGGERS=1
Entity KNVV_KONDA is DropDownList in frmMain
	with defaults
		visible true
		; visible false
		label LABELS.labkONDA
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_PriceGroup
		value ''
	with rules
		; REQUEST.COUNTRY is FR then
		; 	this visible true
		; 	this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KONDA", "Entity name should be 'KNVV_KONDA' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_PLTYP ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=2, TRIGGERS=1
Entity KNVV_PLTYP is DropDownList in frmMain
	with defaults
		visible true
		; visible false
		label LABELS.labPLTYP
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_PriceListType
		value ''
	with rules
		; REQUEST.COUNTRY in {BE, FR} then
		; 	KNVV_PLTYP visible true
		REQUEST.COUNTRY is BE then
			set value 2G in KNVV_PLTYP
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_PLTYP", "Entity name should be 'KNVV_PLTYP' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_CustPricingProc ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=4, TRIGGERS=1
Entity SO_CustPricingProc is DropDownList in frmMain
	with defaults
		label LABELS.labCustPricProc
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_CustomerPricingProcedure with arguments {FlagActive : true}
		value ''
	with rules
		REQUEST.COUNTRY in {FR,GR} then
			this enabled true
			set value 1 in SO_CustPricingProc
		REQUEST.COUNTRY in {PT, BE, LU, GR} or REQUEST.COMPANY_CODE in {5180, 5116} or REQUEST.SALES_ORGANIZATION in {10A0,10A1,10A9,10L0} then
			this enabled false
			set value 1 in SO_CustPricingProc
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads	
; ---------------------------------------------------------------------------- 
If Regional country Belgium -> selected value 1 not enabled
If Regional country Italy and company 5180/5116-> selected value 1 not enabled
If regional country Portugal -> selected value 1 not enabled
If regional country Belgium-> selected value 1 not enabled
If regional country Belgium and company code 5101 and sales org 10A0/10A1/10A9/10L0 -> selected value 1 not enabled
If regional country Luxemburg -> selected value 1 not enabled
If regional country France and Spain -> selected value 1 enabled
If regional country Greece -> selected value 1 enabled
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_CustPricingProc", "Entity name should be 'SO_CustPricingProc' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_CustomerStatsGroup ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=8, RULES=5, TRIGGERS=1
Entity SO_CustomerStatsGroup is DropDownList in frmMain
	with defaults
		label LABELS.labStatusGroup
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_CustomerStatsGroup with arguments {FlagActive : true}
		value ''
	with rules
		REQUEST.COUNTRY is FR then
			set value 1 in SO_CustPricingProc
		REQUEST.COUNTRY in {PT, BE, LU} or REQUEST.COMPANY_CODE in {5180, 5116} then
			this enabled false
			set value 1 in SO_CustPricingProc
		REQUEST.COUNTRY in {ES,FR,GR} then
			set value 1 in SO_CustPricingProc
			this enabled true
		REQUEST.ACCOUNT_GROUP is YCT7 then
			this mandatory true
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_CustomerStatsGroup", "Entity name should be 'SO_CustomerStatsGroup' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 8, "Should have '8' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_CustomerShippingConditions ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=10, TRIGGERS=1
Entity SO_CustomerShippingConditions is DropDownList in frmMain
	with defaults
		label LABELS.labShippingCond
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_CustomerShippingCondition with arguments {FlagActive : true, ClusterCountryCode : REQUEST.COUNTRY}
	with rules
		REQUEST.COUNTRY is FR then
			set value 01 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is GR then
			set value 01 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is PT then
			set value 31 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is BE then
			this enabled false
			set value 11 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is GR then
			set value 01 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is IT then
			set value 31 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is GR then
			set value 21 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is ES and REQUEST.CUSTOMER_COUNTRY is ES then
			set value 31 in SO_CustomerShippingConditions
		REQUEST.COUNTRY is ES and REQUEST.CUSTOMER_COUNTRY is not ES then
			set value 33 in SO_CustomerShippingConditions
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; 1) If requestype creation from scratch/company/sales org and company 5140 :
;  if distribution channel 11 -> default value 6010, if its distribution channel 12 -> default value 6020
; 2) data are loaded by distribution channel from master table
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_CustomerShippingConditions", "Entity name should be 'SO_CustomerShippingConditions' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 10, "Should have '10' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_VWERK ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=4, TRIGGERS=1
Entity KNVV_VWERK is DropDownList in frmMain
	with defaults
		visible false
		enabled false
		label LABELS.labVWERK
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_DeliveryPlant with arguments {CodeSalesOrg : REQUEST.SALES_ORGANIZATION, DistributionChannel : REQUEST.DISTRIBUTION_CHANNEL}
	with rules
		REQUEST.COUNTRY is FR then
			this visible true
			this mandatory false
		REQUEST.REQUEST_TYPE in {CC, CC_CC, CC_SO} and REQUEST.COMPANY_CODE is 5140 and REQUEST.DISTRIBUTION_CHANNEL is 11 then
			; KNVV_VWERK visible true
			set value 6010 in KNVV_VWERK
		REQUEST.REQUEST_TYPE in {CC, CC_CC, CC_SO} and REQUEST.COMPANY_CODE is 5140 and REQUEST.DISTRIBUTION_CHANNEL is 12 then
			; KNVV_VWERK visible true
			set value 6020 in KNVV_VWERK
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_VWERK", "Entity name should be 'KNVV_VWERK' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_AUTLF ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=4, TRIGGERS=2
Entity KNVV_AUTLF is CheckBox in frmMain
	with defaults
		label LABELS.labAUTLF
		visible false
	with rules
		REQUEST.COUNTRY is FR then
			visible true
			set value true in KNVV_AUTLF
		KNVV_AUTLF.Value is true then
			set value 0 in KNVV_ANTLF.Value
		KNVV_AUTLF.Value is false then
			set value '' in KNVV_ANTLF.Value
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_AUTLF", "Entity name should be 'KNVV_AUTLF' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_ANTLF ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=5, TRIGGERS=2
Entity KNVV_ANTLF is DropDownList in frmMain
	with defaults
		data field DisplayName
		value field Code
		label LABELS.labANTLF
		visible false
		load data from DATASOURCE.MDMC_MaxPartDelivery
	with rules
		REQUEST.COUNTRY is FR then
			visible true
			set value 9 in KNVV_ANTLF
		; TODO: Check with SEB about how to reference the model like this
		REQUEST.COUNTRY is FR and KNVV_AUTLF.Value and REQUEST.KNVV_ANTLFSAP.Value is true then
			set value 0 in KNVV_ANTLF
		KNVV_AUTLF is visible and KNVV_KZTLF.Value in {A,B,C} and KNVV_ANTLF.Value > 1 then
			set value MESSAGES.ERRPartiaDelivs1 in MESSAGE_POPUP
		REQUEST.COUNTRY is {IT, BE, GR} and REQUEST.REQUEST_TYPE in {CC, CC_CC, CC_SO} then
			visible true
			set value 0 in KNVV_ANTLF
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this changes	
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_ANTLF", "Entity name should be 'KNVV_ANTLF' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_LPRIO ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, TRIGGERS=1
Entity KNVV_LPRIO is DropDownList in frmMain
	with defaults
		label LABELS.labLPRIO
		data field Displayname
		value field Code
		load data from DATASOURCE.MDMC_DeliverPriority
	with rules
		REQUEST.COUNTRY in {ES, IT, BE, LU, FR, GR, PT} then
			set value 02 in KNVV_LPRIO
			this enable false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads		
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_LPRIO", "Entity name should be 'KNVV_LPRIO' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KZTLF ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=4, TRIGGERS=2
Entity KNVV_KZTLF is DropDownList in frmMain
	with defaults
		label LABELS.labKZTLF
		load data from DATASOURCE.MDMC_PartDeliveryItem
		; TODO: CLarify this value does not exist in DB
		; value 9
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_PartDeliveryItem
	with rules
		KNVV_AUTLF is visible and KNVV_AUTLF.Value is true and KNVV_KZTLF is visible and KNVV_KZTLF is empty then
			set value MESSAGES.ERRPartialDelivInformed in MESSAGE_POPUP
		KNVV_AUTLF is visible and KNVV_AUTLF.Value is true and KNVV_KZTLF is visible and KNVV_KZTLF.Value is D then
			set value MESSAGES.ERRPartialDelivInformed in MESSAGE_POPUP
		KNVV_AUTLF is visible and KNVV_AUTLF.Value is false and KNVV_KZTLF.Value in {A,B} and KNVV_ANTLF.Value > 1 then
			set value 'In Sales Area Data view the field Number of partial deliveries, may not be larger than 1' in MESSAGE_POPUP
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KZTLF", "Entity name should be 'KNVV_KZTLF' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_PRFRE ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=2, TRIGGERS=1
Entity KNVV_PRFRE is CheckBox in frmMain
	with defaults
		label LABELS.labPRFRE
		value false
	with rules
		; NOTE: not in FM
		REQUEST.COUNTRY is FR then
			KNVV_PRFRE mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_PRFRE", "Entity name should be 'KNVV_PRFRE' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_Incoterms ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=8, TRIGGERS=1
Entity SO_Incoterms is DropDownList in frmMain
	with defaults
		label LABELS.labIncoterms
		mandatory true
		data field DisplayName
		value field Code
		; TODO: Crate SP
		load data from DATASOURCE.MDMC_GetIncotermsByCountry with arguments {CountryCode : REQUEST.REQUEST_COUNTRY}
	with rules
		REQUEST.COUNTRY is FR then
			set value DAP in SO_Incoterms
		REQUEST.COUNTRY is PT then
			set value '' in SO_Incoterms
		REQUEST.COUNTRY is ES then
			set value Y30 in SO_Incoterms
		REQUEST.COUNTRY is IT then
			set value FH in SO_Incoterms
		REQUEST.COUNTRY is BE then
			this enabled false
			set value DDP in SO_Incoterms
		REQUEST.COUNTRY is LU then
			set value DDP in SO_Incoterms
		REQUEST.COUNTRY is GR then
			set value '' in SO_Incoterms
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_Incoterms", "Entity name should be 'SO_Incoterms' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 8, "Should have '8' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_IncotermsPart2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=7, TRIGGERS=1
Entity SO_IncotermsPart2 is TextBox in frmMain
	with defaults
		label LABELS.labIncotermsPart2
		mandatory true
	with rules
		REQUEST.COUNTRY is FR and REQUEST.SO_IncotermsPart2.Value is empty then
			set value 'France Metropolitaine' in SO_Incoterms
		REQUEST.COUNTRY is PT and REQUEST.SO_IncotermsPart2.Value is empty then
			set value '' in SO_Incoterms
		REQUEST.COUNTRY is ES  and REQUEST.SO_IncotermsPart2.Value is empty then
			set value 'Y30  - carriage  paid' in SO_Incoterms
		REQUEST.COUNTRY is IT  and REQUEST.SO_IncotermsPart2.Value is empty then
			set value 'Franco domicilio' in SO_Incoterms
		REQUEST.COUNTRY is GR  and REQUEST.SO_IncotermsPart2.Value is empty then
			set value '' in SO_Incoterms
		REQUEST.COUNTRY in {BE,LU}  and REQUEST.SO_IncotermsPart2.Value is empty then
			this enabled false
			set value 'DESTINATION' in SO_Incoterms
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; By default mandatory
; 1) Default values for all type of requests (all types of creation, changes), independently if value from SAP is empty but enquirer can change:
; 1.1) If company code 5140 and customer country ISO  (FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC) -> 6115
; 1.2) If company code 5140 and customer country != ISO  (FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC) -> 6000
; 1.3) if company code luxembourg -> 1113
; 1.4) if company code Spain-> 3E60
; 1.5) if company code Belgium and Luxembourg-> 1109
; 1.6) if company code Portugal: If company code Portugal (5240) -> not visible
; 1.7) if company code 5240 and customer country PT -> 4216
; 1.8) if  company code 5240 and !=customer country PT -> 4116
; ;   TODO: THIS IS CONTRADICTORY
; 1,9) if company code greece (5150) and Italy (5180, 596G) value default blank
; 1,10) if company code GR -> default value 7090
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_IncotermsPart2", "Entity name should be 'SO_IncotermsPart2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 7, "Should have '7' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_TermsOfPaymentKey ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=10, TRIGGERS=1
Entity SO_TermsOfPaymentKey is DropDownList in frmMain
	with defaults
		label LABELS.labTermsOfPaymentKey
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_PaymentTerms with arguments {FlagActive : true, ClusterCountryCode : REQUEST.COUNTRY}
	with rules
		REQUEST.COMPANY_CODE is 5140 and GD_Adr_Country.Value in {FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC} then
			set value 6115 in SO_TermsOfPaymentKey
		REQUEST.COMPANY_CODE is 5140 and GD_Adr_Country.Value not in {FR, GF, GP, RE, MQ, YT, NC, PF, PM, WF, MC} then
			set value 6000 in SO_TermsOfPaymentKey
		REQUEST.COUNTRY is LU then
			set value 1113 in SO_TermsOfPaymentKey
		REQUEST.COUNTRY is ES then
			set value 3E60 in SO_TermsOfPaymentKey
		REQUEST.COUNTRY in {BE, LU} then
			set value 1109 in SO_TermsOfPaymentKey
		REQUEST.COUNTRY is PT then
			SO_TermsOfPaymentKey visible false
		REQUEST.COUNTRY is PT and GD_Adr_Country.Value is PT then
			set value 4216 in SO_TermsOfPaymentKey
		REQUEST.COUNTRY is PT and GD_Adr_Country.Value is PT then
			set value 4116 in SO_TermsOfPaymentKey
		; NOTE: not in FM, but in code
		REQUEST.COUNTRY is IT then
			set value 5001 in SO_TermsOfPaymentKey
;		REQUEST.COUNTRY in {IT, GR} then
;			set value '' in SO_TermsOfPaymentKey
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_TermsOfPaymentKey", "Entity name should be 'SO_TermsOfPaymentKey' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 10, "Should have '10' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KTGRD ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=5, ACTIONS=1, TRIGGERS=1
Entity KNVV_KTGRD is DropDownList in frmMain
	with defaults
		visible false
		enabled false
		label LABELS.labAccountAssimgnGroup
		mandatory false
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_AccountAssgmtGroup with arguments {FlagActive : true}
	with rules
		REQUEST.COUNTRY is GR then
			this visible true
			this enabled true
		REQUEST.COUNTRY is FR then
			this mandatory true
		REQUEST.COUNTRY is REQUEST.CUSTOMER_COUNTRY then
			set value 01 in KNVV_KTGRD
		REQUEST.COUNTRY is not REQUEST.CUSTOMER_COUNTRY then
			set value 02 in KNVV_KTGRD
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KTGRD", "Entity name should be 'KNVV_KTGRD' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_TaxClassification ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=7, RULES=3, TRIGGERS=1
Entity SO_TaxClassification is DropDownList in frmMain
	with defaults
		label LABELS.labTaxClassification
		mandatory true
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_TaxClassification
		value 1
	with rules
		SO_TaxClassification.Value is empty then
			set value 1 in SO_TaxClassification
		REQUEST.REQUEST_TYPE is not CM_BLK and REQUEST.COUNTRY is PT and REQUEST.CUSTOMER_COUNTRY is PT then
			set value 1 in SO_TaxClassification
		REQUEST.REQUEST_TYPE is not CM_BLK and REQUEST.COUNTRY is PT and REQUEST.CUSTOMER_COUNTRY is not PT REQUEST.IsEU is true then
			set value B in SO_TaxClassification
		REQUEST.REQUEST_TYPE is not CM_BLK and REQUEST.COUNTRY is PT and REQUEST.CUSTOMER_COUNTRY is not PT and REQUEST.IsEU is false then
			set value A in SO_TaxClassification
		REQUEST.COUNTRY is FR then
			; THIS CANNOT BE
			; this mandatory true
			set value 1 in SO_TaxClassification
			this enable false
		REQUEST.COUNTRY is ES then
			set value 1 in SO_TaxClassification
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; TODO:
;	""04-08-2014(RG): 1)By default not visible except company code italy and france
;	2)Default values per request creation from scratch and company code:
;	4) for belux company codes there is a file  “Sales Org and Accounting Clerk
;	“ in sheet “Other documents” with default values
;	 5) for portuguese company codes there is a file  “Sales Org and Accounting Clerk
;	“ in sheet “Other documents” with default values
;	6) for spanish company codes there is a file  “Sales Org and Accounting Clerk
;	“ in sheet “Other documents” with default values
;	7) for italian company code 5180, please use the sheet """"credit limit for italy 5180 regional company""""
; TODO: FINISH THIS
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_TaxClassification", "Entity name should be 'SO_TaxClassification' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 7, "Should have '7' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 3, "Should have '3' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNKK_SBGRP ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, TRIGGERS=1
Entity KNKK_SBGRP is DropDownList in frmMain
	with defaults
		visible false
		label LABELS.labCreditControlGroups
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_CreditControlGroups with arguments { CompanyCode : REQUEST.COMPANY_CODE}
	with rules
		REQUEST.COMPANY_CODE is 5140 and REQUEST.REQUEST_TYPE is {CC, CC_CC} then
			load data from DATASOURCE.MDMC_AccountingClerksFORPTBELU with arguments {CountryCode : REQUEST.CUSTOMER_COUNTRY, CodeRegion : GD_Adr_Region.Value} in KNKK_SBGRP
		REQUEST.COUNTRY is BE then
			load data from DATASOURCE.MDMC_CreditControlGroup_Region with arguments {CountryCode : REQUEST.CUSTOMER_COUNTRY, CodeRegion : GD_Adr_Region.Value} in KNKK_SBGRP
		REQUEST.COMPANY_CODE in {5180,596G,5140,491E} then
			this visible true
		REQUEST.COUNTRY is FR then
			this mandatory false	
			this visible true
		REQUEST.COMPANY_CODE in {5140,491E} then
			this mandatory false	
		; TODO: WHAT IS THIS DISCREPANCY	
		REQUEST.REQUEST_TYPE in {CC, CC_SO} then
			load data from DATASOURCE.MDMC_CreditControlGroup_Region with arguments { CountryCode : REQUEST.COUNTRY, CompanyCode : REQUEST.COMPANY_CODE, CodeRegion : GD_Adr_Region.Value} with ouput {KNKK_SBGRP : CodeSBGRP}
		REQUEST.ACCOUNT_GROUP in {YCT6,YVT6,YCT9,YVT9} and GD_Adr_PostalCode.Value.Length >= 2 then
			load data from DATASOURCE.MDMC_CreditControlGroup_Region with arguments { CountryCode : REQUEST.COUNTRY, CompanyCode : REQUEST.COMPANY_CODE, CodeRegion : GD_Adr_Region.Value} with ouput {KNKK_SBGRP : CodeSBGRP}
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNKK_SBGRP", "Entity name should be 'KNKK_SBGRP' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KVGR1 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, ACTIONS=0, TRIGGERS=1
Entity KNVV_KVGR1 is DropDownList in frmMain
	with defaults
		visible false
		label LABELS.labKVGR1
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_AdditionalCustomerData with arguments {Grp : GR1}
	with rules
		REQUEST.COUNTRY is FR then
			KNVV_KVGR1 visible true
			this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KVGR1", "Entity name should be 'KNVV_KVGR1' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KVGR2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, ACTIONS=0, TRIGGERS=1
Entity KNVV_KVGR2 is DropDownList in frmMain
	with defaults
		visible false
		label LABELS.labKVGR2
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_AdditionalCustomerData with arguments {Grp : GR2}
	with rules
		REQUEST.COUNTRY is FR then
			KNVV_KVGR2 visible true
			this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KVGR2", "Entity name should be 'KNVV_KVGR2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KVGR3 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, ACTIONS=0, TRIGGERS=1
Entity KNVV_KVGR3 is DropDownList in frmMain
	with defaults
		visible false
		label LABELS.labKVGR3
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_AdditionalCustomerData with arguments {Grp : GR3}
	with rules
		REQUEST.COUNTRY is FR then
			KNVV_KVGR3 visible true
			this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KVGR3", "Entity name should be 'KNVV_KVGR3' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KVGR4 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=2, ACTIONS=0, TRIGGERS=1
Entity KNVV_KVGR4 is DropDownList in frmMain
	with defaults
		visible false
		label LABELS.labKVGR4
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_AdditionalCustomerData with arguments {Grp : GR4}
	with rules
		REQUEST.COUNTRY is FR then
			KNVV_KVGR4 visible true
			this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads	
; ---------------------------------------------------------------------------- 
; TODO: CHECK PARAMETER NAME IN DATASOURCES
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KVGR4", "Entity name should be 'KNVV_KVGR4' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNVV_KVGR5 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=4, ACTIONS=0, TRIGGERS=1
Entity KNVV_KVGR5 is DropDownList in frmMain
	with defaults
		label LABELS.labKVGR5
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_AdditionalCustomerData with arguments {Grp : GR5}
	with rules
		REQUEST.SALES_ORGANIZATION in {40E0, 31E0, 60E0, 50E0, 70E0, 10E0, 22E0} then
			KNVV_KVGR5 mandatory true
			load data from DATASOURCE.MDMC_AdditionalCustomerData with arguments {Group : GR4, Filter : true}
		REQUEST.SALES_ORGANIZATION not in {40E0, 31E0, 60E0, 50E0, 70E0, 10E0, 22E0} then
			KNVV_KVGR5 mandatory false
			load data from DATASOURCE.MDMC_AdditionalCustomerData with arguments {Group : GR4}
		REQUEST.COUNTRY is FR then
			KNVV_KVGR4 visible true
			this mandatory false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
;   TODO: REVIEW THIS WITH THE EXCEL FILES
;	1) Read only field
;	2) see attached email """"credit control area (legal form) for all french companies in sheet “other documents”
;	3) For spanish, portuguese company codes creations from scratch and company code, by default 0
;	4) For belgium and luxembourg company codes creations from scratch and company code, by default 5.000
;	5) for italian company 5180, Based in Credit rep. Group, MADAM has to find into the sheet """"credit limit for italy 5180 regional company"""" attached in sheet “other documents” the values the values for the fields KNKK-KLIMK & KNKK-NXTRV
;	   please follow the instructions in the sheet """"credit limit for italy 5180 regional company"""" attached in sheet “other documents”
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNVV_KVGR5", "Entity name should be 'KNVV_KVGR5' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 4, "Should have '4' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNKK_DBRTG ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=1, TRIGGERS=1
Entity KNKK_DBRTG is TextBox in frmMain
	with defaults
		label LABELS.labRating
		enabled false
		max length 5
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; TODO: in case of french company codes See default values in excel attached CamposCreditLimit.xls""
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNKK_DBRTG", "Entity name should be 'KNKK_DBRTG' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNKK_REVDB ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=1, TRIGGERS=1
Entity KNKK_REVDB is TextBox in frmMain
	with defaults
		label LABELS.labLastReviewExt
		enabled false
		max length 8
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNKK_REVDB", "Entity name should be 'KNKK_REVDB' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNKK_GRUPP ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity KNKK_GRUPP is TextBox in frmMain
	with defaults
		enabled false
		visible false
		max length 4
; ---------------------------------------------------------------------------- 
; TODO: in case of french company codes See default values in excel attached CamposCreditLimit.xls""
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNKK_GRUPP", "Entity name should be 'KNKK_GRUPP' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_KNKK_DBEKR ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=5, RULES=1, TRIGGERS=1
Entity KNKK_DBEKR is NumericBox in frmMain
	with defaults
		label LABELS.labRecClimit
		enabled false
		max length 15
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "KNKK_DBEKR", "Entity name should be 'KNKK_DBEKR' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 5, "Should have '5' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnBlockAll ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=10, RULES=1, TRIGGERS=2
Entity btnBlockAll is Button in frmMain
	with defaults
		label LABELS.labBlockAll
	with actions
		set value true in BLK_CentralPostingBlock
		set value true in BLK_PostingBlockForCC
		set value true in BLK_CentralSalesSupportBlock
		set value true in BLK_CentralSalesSupportBlockAtSalesArea
		set value '1F' in BLK_PostingBlockForCC
		set value '1F' in BLK_OrdersBlockAtSalesArea
		set value '1F' in BLK_CentralDeliveriesBlock
		set value '1F' in BLK_DeliveriesBlockAtSalesArea
		set value '1F' in BLK_CentralBillingBlock
		set value '1F' in BLK_BillingBlockAtSalesArea
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
			this visible false
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "btnBlockAll", "Entity name should be 'btnBlockAll' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 10, "Should have '10' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnUnblockAll ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=10, RULES=1, TRIGGERS=2
Entity btnUnblockAll is Button in frmMain
	with defaults
		label LABELS.labUnblockAll
	with actions
		set value false in BLK_CentralPostingBlock
		set value false in BLK_PostingBlockForCC
		set value false in BLK_CentralSalesSupportBlock
		set value false in BLK_CentralSalesSupportBlockAtSalesArea
		set value '' in BLK_PostingBlockForCC
		set value '' in BLK_OrdersBlockAtSalesArea
		set value '' in BLK_CentralDeliveriesBlock
		set value '' in BLK_DeliveriesBlockAtSalesArea
		set value '' in BLK_CentralBillingBlock
		set value '' in BLK_BillingBlockAtSalesArea
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
			this visible false
	with triggers
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "btnUnblockAll", "Entity name should be 'btnUnblockAll' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 10, "Should have '10' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_GD_Ctr_UnsubscribeCMD ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=6, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_GD_Ctr_UnsubscribeCMD is DropDownList in frmMain
	with defaults
		label LABELS.labUnsubscribeCMD
		data field DisplayName
		value field Code
		load data from DATASOURCE.UnsubscribeOptions
	with actions
		set value BLK_GD_Ctr_UnsubscribeCMD.Value in GD_Ctr_UnsubscribeCMD
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		; _COMMENT_ mandatory  false
	with triggers 
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_GD_Ctr_UnsubscribeCMD", "Entity name should be 'BLK_GD_Ctr_UnsubscribeCMD' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralPostingBlock ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_CentralPostingBlock is CheckBox in frmMain
	with defaults
		label LABELS.labCentralPostingBlock
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		this changes
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralPostingBlock", "Entity name should be 'BLK_CentralPostingBlock' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_PostingBlockForCC ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_PostingBlockForCC is CheckBox in frmMain
	with defaults
		label LABELS.labPostBlockingForCompanyCode
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_PostingBlockForCC", "Entity name should be 'BLK_PostingBlockForCC' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralSalesOrderBlock ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=6, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_CentralSalesOrderBlock is DropDownList in frmMain
	with defaults
		label LABELS.labCentralSalesOrdersBlock
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_OrderBlock
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralSalesOrderBlock", "Entity name should be 'BLK_CentralSalesOrderBlock' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_OrdersBlockAtSalesArea ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=6, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_OrdersBlockAtSalesArea is DropDownList in frmMain
	with defaults
		label LABELS.labOrdersBlockAtThisSalesArea
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_BLK_BillingBlockAtSalesArea
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_OrdersBlockAtSalesArea", "Entity name should be 'BLK_OrdersBlockAtSalesArea' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralDeliveriesBlock ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=6, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_CentralDeliveriesBlock is DropDownList in frmMain
	with defaults
		label LABELS.labCentralDeliveriesBlock
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_DeliveryBlock
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralDeliveriesBlock", "Entity name should be 'BLK_CentralDeliveriesBlock' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_DeliveriesBlockAtSalesArea ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=6, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_DeliveriesBlockAtSalesArea is DropDownList in frmMain
	with defaults
		label LABELS.labDeliveriesBlockAtThisSalesArea
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_DeliveryBlock
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_DeliveriesBlockAtSalesArea", "Entity name should be 'BLK_DeliveriesBlockAtSalesArea' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralBillingBlock ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=6, RULES=1, TRIGGERS=1
Entity BLK_CentralBillingBlock is DropDownList in frmMain
	with defaults
		label LABELS.labCentralBillingBlock
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_BillingBlock
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralBillingBlock", "Entity name should be 'BLK_CentralBillingBlock' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_BillingBlockAtSalesArea ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=6, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_BillingBlockAtSalesArea is DropDownList in frmMain
	with defaults
		label LABELS.labBillingBlockAtThisSalesArea
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_BLK_BillingBlockAtSalesArea with arguments {FlagActive : true}
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_BillingBlockAtSalesArea", "Entity name should be 'BLK_BillingBlockAtSalesArea' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralSalesSupportBlock ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, TRIGGERS=1
Entity BLK_CentralSalesSupportBlock is CheckBox in frmMain
	with defaults
		label LABELS.labCentralSalesSupportBlock
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralSalesSupportBlock", "Entity name should be 'BLK_CentralSalesSupportBlock' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralSalesSupportBlockAtSalesArea ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, TRIGGERS=1
Entity BLK_CentralSalesSupportBlockAtSalesArea is CheckBox in frmMain
	with defaults
		label LABELS.labCentralSalesSupportBlockAtThisSalesArea
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralSalesSupportBlockAtSalesArea", "Entity name should be 'BLK_CentralSalesSupportBlockAtSalesArea' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralDeletionFlagMasterRecord ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_CentralDeletionFlagMasterRecord is CheckBox in frmMain
	with defaults
		label LABELS.labCentralDelMasterRecord
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralDeletionFlagMasterRecord", "Entity name should be 'BLK_CentralDeletionFlagMasterRecord' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_DeletionFlagMasterRecordCC ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_DeletionFlagMasterRecordCC is CheckBox in frmMain
	with defaults
		label LABELS.labDelFlagMasterCompanyCode
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_DeletionFlagMasterRecordCC", "Entity name should be 'BLK_DeletionFlagMasterRecordCC' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_DeletionFlagMasterRecordSA ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, TRIGGERS=1
Entity BLK_DeletionFlagMasterRecordSA is CheckBox in frmMain
	with defaults
		label LABELS.labDelFlagAtThisSalesArea
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_DeletionFlagMasterRecordSA", "Entity name should be 'BLK_DeletionFlagMasterRecordSA' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_CentralDeletionBlockMasterRecord ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_CentralDeletionBlockMasterRecord is CheckBox in frmMain
	with defaults
		label LABELS.labCentralDelBlockMaster
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_CentralDeletionBlockMasterRecord", "Entity name should be 'BLK_CentralDeletionBlockMasterRecord' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_BLK_DeletionBlockMasterRecordCC ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=1, ACTIONS=1, TRIGGERS=2
Entity BLK_DeletionBlockMasterRecordCC is CheckBox in frmMain
	with defaults
		label LABELS.labDelBlockMasterCompany
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} or REQUEST.REQUEST_TYPE is not CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		; ATTACHMENT mandatory  false
		_COMMENT_ mandatory  true  
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "BLK_DeletionBlockMasterRecordCC", "Entity name should be 'BLK_DeletionBlockMasterRecordCC' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_TS_IsUrgentRequest ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN ; DEFAULTS=3, RULES=2, ACTIONS=0, TRIGGERS=1
Entity TS_IsUrgentRequest is CheckBox in frmMain
	with defaults
		label LABELS.labUrgentRequest
	with rules
		REQUEST.STATE in {STATES.CLOSED, STATES.LOCKED} then
			this enable false
		REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; Entity CostCenter is TextBox in frmMain
; 
; 	with defaults
; 		label LABELS.labCostCenter
; 
; 	with rules
; 		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
; 			this enable false	
; ---------------------------------------------------------------------------- 
; TODO: SEE HOW TO DO THIS
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "TS_IsUrgentRequest", "Entity name should be 'TS_IsUrgentRequest' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnClose ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity btnClose is Button in frmMain
	with defaults
		label LABELS.btnClose
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "btnClose", "Entity name should be 'btnClose' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_Ctr_IsNaturalPerson ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, RULES=5, ACTIONS=1, TRIGGERS=2
Entity GD_Ctr_IsNaturalPerson is CheckBox in frmMain
	with defaults
		label LABELS.labGD_Ctr_IsNaturalPerson
		value false
	with rules
		; TODO: MISSING FRANCE PARTNER AND REGIONAL DUE TO LEGAL FORM - CHECK LATER
		; ALL FIELDS IN	DIV_ADDITIONAL_INFO_NATURAL_PERSON mandatory
		REQUEST.COUNTRY is ES and GD_Ctr_TaxCode1.Value starts with {P, Q, S} then 
			set value false in GD_Ctr_IsNaturalPerson
			set value G in GD_Ctr_CustomerClassification
		REQUEST.COUNTRY is ES and GD_Ctr_TaxCode1.Value starts with {X,1,2,3,4,5,6,7,8,9} then 
			set value true in GD_Ctr_IsNaturalPerson 
			set value NG in GD_Ctr_CustomerClassification
		REQUEST.CURRENT_ROLE is ROLES.RCO then
			GD_Ctr_IsNaturalPerson enabled true
		REQUEST.CURRENT_ROLE in {ROLES.ENQ, ROLES.RCO, ROLES.CLERK} then 
			this enabled true
		else
			this enabled false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
	with actions
		ATTACHMENT mandatory  true  
		; _COMMENT_ mandatory  false
	with triggers 
		on change
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_Ctr_IsNaturalPerson", "Entity name should be 'GD_Ctr_IsNaturalPerson' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 5, "Should have '5' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_ATTACHMENT ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=1, DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity ATTACHMENT is AttachmentManager in frmMain
	with defaults
		mandatory true
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
; TODO: CHECK
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "ATTACHMENT", "Entity name should be 'ATTACHMENT' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SAP_Message ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=0, DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity SAP_Message is TextBox in frmMain
	with defaults
		label LABELS.labSAP_Message
		enable false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SAP_Message", "Entity name should be 'SAP_Message' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_GD_SAPNumber ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=1, DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity GD_SAPNumber is TextBox in frmMain
	with defaults
		visible false
		label LABELS.labSAPNumber
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "GD_SAPNumber", "Entity name should be 'GD_SAPNumber' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_DDLDCComment ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=1, DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity DDLDCComment is TextBox in frmMain
	with defaults
		label LABELS.labComments
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
		; TODO: CHECK
		REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "DDLDCComment", "Entity name should be 'DDLDCComment' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnSCClose ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=2, DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity btnSCClose is Button in frmMain
	with defaults
		label LABELS.btnClose
	with rules
		REQUEST.REQUEST_STATE is not CLOSED and btnSubmit.Visible is true then
			this visible true
		btnClose.Visible is true then
			this visible false
		else
			this visible true
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "btnSCClose", "Entity name should be 'btnSCClose' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SR_Comments ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=1, DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity SR_Comments is TextBox in frmMain
	with defaults
		label LABELS.labSR_Comments
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SR_Comments", "Entity name should be 'SR_Comments' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnBack2 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=1, DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity btnBack2 is Button in frmMain
	with defaults
		label LABELS.btnBack
	with rules
		REQUEST.REQUEST_STATE is CLOSED then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "btnBack2", "Entity name should be 'btnBack2' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_btnSave ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : RULES=1, DEFAULTS=3, ACTIONS=1, TRIGGERS=2
Entity btnSave is Button in frmMain
	with defaults
		label LABELS.btnSave
	with actions
		this enable false
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} then
			this enable false	
		else
			this enable true
	with triggers
		this on click
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "btnSave", "Entity name should be 'btnSave' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 2, "Should have '2' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_PF_PartnerFunction ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4
Entity PF_PartnerFunction is DropDownList in PF_Grid
	with defaults
		label LABELS.labPartnerFunction
		load data from DATASOURCE.MDMC_PartnerFunction with arguments { FlagActive : true, ClusterCountryCode : REQUEST.COUNTRY}
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "PF_Grid", "Entity form should be 'PF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "PF_PartnerFunction", "Entity name should be 'PF_PartnerFunction' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_PF_Number ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity PF_Number is TextBox in PF_Grid
	with defaults
		label LABELS.labPFNumber
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "PF_Grid", "Entity form should be 'PF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "PF_Number", "Entity name should be 'PF_Number' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_PF_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3
Entity PF_btnInsert is Button in PF_Grid
	with defaults
		label LABELS.btnInsert
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "PF_Grid", "Entity form should be 'PF_Grid' but is " + e.Form );
			Assert.That ( e.Name == "PF_btnInsert", "Entity name should be 'PF_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 0, "Should have '0' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_PF_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=4, TRIGGERS=1, RULES=1
Entity PF_Grid is Grid in frmMain
	with defaults
		define column GRID_PF_PartnerFunction	with arguments { ControlID : PF_PartnerFunction, DataField : DisplayName, Header : LABELS.labSurname, Visible : true}
		define column GRID_PF_Number			with arguments { ControlID : PF_Number, DataField : Code, Header : LABELS.labNumber, Visible : true, MaxLength : 15}
		; define column GRID_PF_Default			with arguments { ControlID : IsDefault, DataField : IsDefault, Visible : true}
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ----------------------------------------------------------------------------	
; --- CONTACT PERSONS --------------------------------------------------------
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "PF_Grid", "Entity name should be 'PF_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 4, "Should have '4' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_btnClearAll ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=1, TRIGGERS=1
Entity CP_btnClearAll is Button in CP_Grid
	with defaults
		label LABELS.btnClearAll
	with actions
		clear CP_Grid
	with triggers
		this clicks
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_btnClearAll", "Entity name should be 'CP_btnClearAll' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 1, "Should have '1' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Surname ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=1
Entity CP_Surname is TextBox in CP_Grid
	with defaults
		label LABELS.labCP_Surname
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_Surname", "Entity name should be 'CP_Surname' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Name ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=1
Entity CP_Name is TextBox in CP_Grid
	with defaults
		label LABELS.labCP_Name
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_Name", "Entity name should be 'CP_Name' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Department ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=6, RULES=1, ACTIONS=0, TRIGGERS=1
Entity CP_Department is DropDownList in CP_Grid
	with defaults
		label LABELS.labCP_Department
		data field DisplayName
		value field Code
		load data from DATASOURCE.MDMC_Department with arguments {FlagActive : true}
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_Department", "Entity name should be 'CP_Department' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 6, "Should have '6' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Telephone ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, ACTIONS=0, TRIGGERS=1
Entity CP_Telephone is TextBox in CP_Grid
	with defaults
		label LABELS.labCP_Phone
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_Telephone", "Entity name should be 'CP_Telephone' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 0, "Should have '0' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Fax ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=1
Entity CP_Fax is TextBox in CP_Grid
	with defaults
		label LABELS.labCP_Fax
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_Fax", "Entity name should be 'CP_Fax' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Email ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=1
Entity CP_Email is TextBox in CP_Grid
	with defaults
		label LABELS.labCP_Email
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_Email", "Entity name should be 'CP_Email' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Default ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=1
Entity CP_Default is CheckBox in CP_Grid
	with defaults
		label LABELS.labCP_Default
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_Default", "Entity name should be 'CP_Default' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_btnInsert ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=3, RULES=1, ACTIONS=0, TRIGGERS=1
Entity CP_btnInsert is Button in CP_Grid
	with defaults
		label LABELS.btnInsert
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
	with triggers
		this loads
; ---------------------------------------------------------------------------- 
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "CP_Grid", "Entity form should be 'CP_Grid' but is " + e.Form );
			Assert.That ( e.Name == "CP_btnInsert", "Entity name should be 'CP_btnInsert' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 3, "Should have '3' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_CP_Grid ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=10, RULES=2, ACTIONS=0, TRIGGERS=4
Entity CP_Grid is Grid in frmMain
	with defaults
		define column GRID_CP_Name				with arguments { ControlID : CP_Name ,DataField : Name, Header : LABELS.labName, MaxLength : 100, Visible : true}
		define column GRID_CP_Surname			with arguments { ControlID  : CP_Surname ,DataField : Surname, Header : LABELS.labSurname, MaxLength : 100, Visible : true}
		define column GRID_CP_Department		with arguments { ControlID CP_Department: ,DataField : Deparment, Header : LABELS.labDepartment, Visible : true}
		define column GRID_CP_Telephone			with arguments { ControlID : CP_Telephone ,DataField : Telephone, Header : LABELS.labBankControlKey, Visible : true}
		define column GRID_CP_Fax				with arguments { ControlID : CP_Fax,DataField : Fax, Header : LABELS.labFax, Visible : true}
		define column GRID_CP_Email				with arguments { ControlID : CP_Email,DataField : Email, Header : LABELS.labEmail, Visible : true}
		; define column GRID_CP_KNVK_NAME1		with arguments { ControlID : ,DataField : KNVK_NAME1, Visible : false}
		define column GRID_CP_Default			with arguments { ControlID : CP_Default,	DataField : Default, Visible : true}
	with rules
		REQUEST.ACCOUNT_GROUP in {YCT6, YCT9} then
			this visible false
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE in {ROLES.SUS, ROLES.RCO} or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false		
	with triggers
		on row inserted
		on row deleted
		on row updated
		this loads
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "CP_Grid", "Entity name should be 'CP_Grid' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 10, "Should have '10' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 2, "Should have '2' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 4, "Should have '4' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

		[Test]
		public void TestEntity_SO_lbxSODSalesOrganization1 ()
		{
			var parser = new Parser ();
			parser.ParseRuleSetAsString ( @"; TESTGEN : DEFAULTS=2, RULES=1, TRIGGERS=1, ACTIONS=0
Entity SO_lbxSODSalesOrganization1 is Object in frmMain
	with rules
		REQUEST.STATE in {STATE.LOCKED, STATE.CLOSED} or REQUEST.REQUEST_TYPE is CM_BLK or REQUEST.CURRENT_ROLE is ROLES.SUS or REQUEST.USER_PERMISSION is ACCESSRIGHTS.READER then
			this enable false	
	with triggers
		this loads
; ----------------------------------------------------------------------------	
" 
			);
			Assert.That ( parser.Entities.Count () == 1 );
			var e = parser.Entities.First ();
			Assert.That ( e.Form == "frmMain", "Entity form should be 'frmMain' but is " + e.Form );
			Assert.That ( e.Name == "SO_lbxSODSalesOrganization1", "Entity name should be 'SO_lbxSODSalesOrganization1' but is " + e.Name );
			Assert.That ( e.Defaults.Count() == 2, "Should have '2' default clauses but has " + e.Defaults.Count());
			Assert.That ( e.ConditionlessActions.Count() == 0, "Should have '0' Conditionless Actions but has " + e.ConditionlessActions.Count());
			Assert.That ( e.Rules.Count() == 1, "Should have '1' Rules but has " + e.Rules.Count());
			Assert.That ( e.Triggers.Count() == 1, "Should have '1' Triggers but has " + e.Triggers.Count());
		}


		// ---------------------------------------------------------------------------------

	}
}